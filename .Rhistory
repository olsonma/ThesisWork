View(newmacs)
newmacs$vload[id == 1022]
newmacs$vload[newmacs$id == 1022]
newmacs$vload[newmacs$id == 1022][1]
beta0i
beta0i <- beta1i <- NULL
for(i in unique(newmacs$id)){
modi <- lm(cd4 ~ month, subset = (id == i), data=newmacs)
beta0i <- c(beta0i, modi$coef[1])
beta1i <- c(beta1i, modi$coef[2])
vload0 <- c(vload0, newmacs$vload[id == i][1])
}
beta0i <- beta1i <- vload0 <- NULL
for(i in unique(newmacs$id)){
modi <- lm(cd4 ~ month, subset = (id == i), data=newmacs)
beta0i <- c(beta0i, modi$coef[1])
beta1i <- c(beta1i, modi$coef[2])
vload0 <- c(vload0, newmacs$vload[id == i][1])
}
beta0i <- beta1i <- vload0 <- NULL
for(i in unique(newmacs$id)){
modi <- lm(cd4 ~ month, subset = (id == i), data=newmacs)
beta0i <- c(beta0i, modi$coef[1])
beta1i <- c(beta1i, modi$coef[2])
vload0 <- c(vload0, newmacs$vload[newmacs$id == i][1])
}
beta0 <- lm(beta0i ~ 1)
beta1 <- lm(beta0i ~ newmacs$vload, subset = )
beta0i <- beta1i <- vload0 <- NULL
for(i in unique(newmacs$id)){
modi <- lm(cd4 ~ month, subset = (id == i), data=newmacs)
beta0i <- c(beta0i, modi$coef[1])
beta1i <- c(beta1i, modi$coef[2])
vload0 <- c(vload0, newmacs$vload[newmacs$id == i][1]) ## get baseline for each id
}
beta0 <- lm(beta0i ~ 1)
beta1 <- lm(beta0i ~ vload0)
length(vload)
length(vload0)
length(beta1i)
length(beta0i)
beta0 <- lm(beta0i ~ 1)
beta1 <- lm(beta0i ~ vload0)
summary(beta0)
summary(beta1)
summary(beta0i)
summary(beta1i)
head(beta1i)
head(vload0)
(11306-38570)/(-5.001911+13.9908)
(-13.99+5.0019)/(38570-11306)
plot(beta1i, vload0)
plot(vload0, beta1i)
loess(vload0~beta1i)
p
r <- ggplot(aes(x=vload0, y=beta1i))
?ggplot
r <- ggplot(x=vload0, y=beta1i)
r
r + stat_smooth(group = 1, method = loess)
r <- ggplot(x=vload0, y=beta1i)
r + stat_smooth(group = 1, method = loess)
r <- qplot(x=vload0, y=beta1i)
r + stat_smooth(group = 1, method = loess)
r <- qplot(x=vload0[-which(vload > 500000)], y=beta1i[-which(vload > 500000)])
r + stat_smooth(group = 1, method = loess)
which(vload > 500000)
r <- qplot(x=vload0[-which(vload0 > 500000)], y=beta1i[-which(vload0 > 500000)])
r + stat_smooth(group = 1, method = loess)
r + lines()
r + lines(x = vload0, y = beta1i)
plot(vload-, beta1i)
plot(vload, beta1i)
plot(vload0, beta1i)
lines(x = vload0, y = beta1i)
plot.new
plot()
plot(vload0, beta1i)
lines(x = vload0, y = beta1i)
plot(vload0, beta1i)
lines(x = vload0, y = beta1i)
plot(vload0, beta1i)
abline(beta1)
abline(lm(beta0i~vload0))
plot(vload0, beta1i)
abline(lm(beta0i~vload0))
plot(vload0, beta1i)
abline(beta0, beta1)
beta0 <- lm(beta0i ~ 1)
beta1 <- lm(beta0i ~ vload0)
summary(beta0)
summary(beta1)
plot(vload0, beta1i)
abline(beta0, beta1)
plot(vload0, beta1i)
abline(beta0, beta1)
plot.new()
plot.new()
plot(vload0, beta1i)
abline(beta0, beta1)
plot(vload0, beta1i)
abline(beta0, beta1)
plot(beta1i, vload0)
abline(lm(beta1i~vload0))
plot(beta1i, vload0)
abline(lm(beta1i~vload0))
plot(beta1i, vload0)
abline(lm(beta1i~vload0))
summary(lm(veta1i~vload0))
summary(lm(beta1i~vload0))
beta1 <- lm(beta1i ~ vload0)
veta1
summary(beta1)
abline(lm(beta1i~vload0))
plot(beta1i, vload0)
abline(lm(beta1i~vload0))
sd(beta1i)
sd(beta1i)
summary(beta1)
describe(beta1i)
toxicitydata3 <- read.csv("~/Downloads/2017-01-27hem1553toxicity.data.csv", header=T)
toxicitydata3[toxicitydata3$gastroEventType == "Diarrhea"]
toxicitydata3[toxicitydata3$gastroEventType == "Diarrhea",]
dim(toxicitydata3[toxicitydata3$gastroEventType == "Diarrhea",])
toxicitydata3[toxicitydata3$gastroEventType == "Diarrhea" & toxicitydata3$grade == 1,]
dim(toxicitydata3[toxicitydata3$gastroEventType == "Diarrhea" & toxicitydata3$grade == 1,])
toxicitydata3[toxicitydata3$bloodEventType == "Febrile neutropenia"]
toxicitydata3[toxicitydata3$bloodEventType == "Febrile neutropenia",]
dim(toxicitydata3[toxicitydata3$bloodEventType == "Febrile neutropenia",])
library(doBy)
##reproduce adverse event report
## This code will reproduce adverse event report. This is a frequency table by grade, category, and toxicity
## READ IN THE DATA
## Note: there is one toxicity data file (from file path that is the same), but two different
## names because of how the file was originally created. The compilation of this report
## was created from a few different R-scripts, where toxicity data was defined differently
## toxicitydata3 and toxicitydata2 are read in the same, but used for different parts of the
## report in the coding
##read in toxicity data
tox3.1538 <- read.csv("~/Downloads/2017-01-30hem1538toxicity.data.csv", header=T)
tox2.1538 <- read.csv("~/Downloads/2017-01-30hem1538toxicity.data.csv", header=T)
## read in response data
responsedata <- read.csv("~/Downloads/2017-01-30hem1538response.data.csv", header=T)
## read in visit data
visit.1538 <- read.csv("~/Downloads/2017-01-30hem1538visit.data.csv", header=T)
tox3.1538[is.na(tox3.1538)] <- ""
tox2.1538[is.na(tox2.1538)] <- ""
responsedata[is.na(responsedata)] <- ""
## delete the duplicates
tox3.1538 <- tox3.1538[-which(grepl("_", tox3.1538$id.form.ae)),]
tox2.1538 <- tox2.1538[-which(grepl("_", tox2.1538$id.form.ae)),]
responsedata <- responsedata[responsedata$visit == "EoT",]
responsedata <- responsedata[, c(1,6)]
names(responsedata) <- c('patient_id','response')
visitdata <- visit.1538[visit.1538$visit == "EoT",]
visitdata <- visitdata[,7]
visitdata
visitdata <- visit.1538[visit.1538$visit == "EoT",]
visitdata
responsedata
visitdata <- visit.1538[visit.1538$visit == "EoT" | visit.1538$visit == "EoT_notPerformed",]
visitdata
dim(visitdata)
responsedata$patient_id[responsedata$patient_id == 1538-01-105]
responsedata$patient_id[responsedata$patient_id == 1538-01-106]
responsedata$patient_id[responsedata$patient_id == 1538-01-109]
responsedata
responsedata$patient_id[responsedata$patient_id == 1538-01-109,]
responsedata[responsedata$patient_id == 1538-01-109]
responsedata[responsedata$patient_id]
responsedata[responsedata$patient_id,]
responsedata[responsedata$patient_id == 106]
responsedata[responsedata$patient_id == 1538-01-106]
responsedata[responsedata$patient_id == "1538-01-106"]
responsedata[responsedata$patient_id == "1538-01-109"]
responsedata[responsedata$patient_id == "1538-01-109",]
responsedata[responsedata$patient_id == "1538-01-106",]
class(responsedata[responsedata$patient_id == "1538-01-106",])
?merge
merge(responsedata, visitdata, by = intersect(patient_id, patient_id))
visitdata
responsedata
merge(responsedata, visitdata, by = intersect(patient_id, study_patient_id))
merge(responsedata, visitdata, by = intersect("patient_id", "study_patient_id"))
newdf <- merge(responsedata, visitdata, by = intersect("patient_id", "study_patient_id"))
head(newdf)
newdf
visitdata
visitdata <- visitdata[, c(1,6)]
names(visitdata) <- c('patient_id', 'visit')
newdf <- merge(responsedata, visitdata, by = "patient_id")
newdf
visitdata
responsedata
newdf <- merge(responsedata, visitdata, by = "patient_id", incomparables = NA)
newdf
newdf <- merge(responsedata, visitdata, by = "patient_id", incomparables = NA, all = TRUE)
newdf
patient_id <- EoTperformed <- dataUpToDate <- response <- NULL
for(i in 1:unique(EOTdf$study_patient_id)){
patient_id <- c(patient_id, EOTdf$patient_id[i])
EoTperformed <- c(EoTperformed, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
dataUpToDate <- c(dataUpToDate, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
#visitdat
EOTdf <- merge(responsedata, visitdata, by = "patient_id", incomparables = NA, all = TRUE)
patient_id <- EoTperformed <- dataUpToDate <- response <- NULL
for(i in 1:unique(EOTdf$study_patient_id)){
patient_id <- c(patient_id, EOTdf$patient_id[i])
EoTperformed <- c(EoTperformed, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
dataUpToDate <- c(dataUpToDate, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
patient_id <- EoTperformed <- dataUpToDate <- response <- NULL
for(i in 1:unique(EOTdf$patient_id)){
patient_id <- c(patient_id, EOTdf$patient_id[i])
EoTperformed <- c(EoTperformed, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
dataUpToDate <- c(dataUpToDate, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
1:unique(EOTdf$patient_id)
EOTdf
1:dim(EOTdf)[1]
patient_id <- EoTperformed <- dataUpToDate <- response <- NULL
for(i in 1:dim(EOTdf)[1]){
patient_id <- c(patient_id, EOTdf$patient_id[i])
EoTperformed <- c(EoTperformed, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
dataUpToDate <- c(dataUpToDate, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
patient
patient_id
EOTdf$patient_id[1]
patient_id <- EoTperformed <- dataUpToDate <- response <- NULL
for(i in 1:dim(EOTdf)[1]){
print(i)
patient_id <- c(patient_id, EOTdf$patient_id[i])
EoTperformed <- c(EoTperformed, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
dataUpToDate <- c(dataUpToDate, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
patient_id
patient_id <- EoTperformed <- dataUpToDate <- response <- NULL
for(i in 1:dim(EOTdf)[1]){
print(i)
patient_id <- c(patient_id, EOTdf$patient_id[i])
print(patient_id)
EoTperformed <- c(EoTperformed, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
dataUpToDate <- c(dataUpToDate, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
EOTdf$patient_id[1]
EOTdf$patient_id[1,]
EOTdf$patient_id[1]
patient_id <- EoTperformed <- dataUpToDate <- response <- c()
for(i in 1:dim(EOTdf)[1]){
print(i)
patient_id <- c(patient_id, EOTdf$patient_id[i])
print(patient_id)
EoTperformed <- c(EoTperformed, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
dataUpToDate <- c(dataUpToDate, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
EoTperformed
dim(EOTdf)[1]
View(visitdata)
for(i in 1:dim(EOTdf)[1]){
print(EOTdf$patient_id[i])
}
for(i in 1:dim(EOTdf)[1]){
print(as.numeric(EOTdf$patient_id[i]))
}
for(i in 1:dim(EOTdf)[1]){
print(as.character(EOTdf$patient_id[i]))
}
patient_id <- EoTperformed <- dataUpToDate <- response <- NULL
for(i in 1:dim(EOTdf)[1]){
print(i)
patient_id <- c(patient_id, as.character(EOTdf$patient_id[i]))
EoTperformed <- c(EoTperformed, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
dataUpToDate <- c(dataUpToDate, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
class(EOTdf$patient_id)
EOTdf$patient_id <- as.character(EOTdf$patient_id)
class(EOTdf$patient_id)
EOTdf$patient_id
for(i in 1:dim(EOTdf)[1]){
print(i)
patient_id <- c(patient_id, EOTdf$patient_id[i])
EoTperformed <- c(EoTperformed, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
dataUpToDate <- c(dataUpToDate, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
patient_id
EOTdf
dim(EOTdf)[1]
EOTdf <- merge(responsedata, visitdata, by = "patient_id", incomparables = NA, all = TRUE)
## goal is to combine the information from the visitdata and the response data
patient_id <- EoTperformed <- dataUpToDate <- response <- NULL
## currently a factor variable
EOTdf$patient_id <- as.character(EOTdf$patient_id)
## get information we need
for(i in 1:dim(EOTdf)[1]){
patient_id <- c(patient_id, EOTdf$patient_id[i])
EoTperformed <- c(EoTperformed, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
dataUpToDate <- c(dataUpToDate, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
patient
patient_id
EOTdfCompleteInfo <- data.frame(patient_id, EoTperformed, dataUpToDate, response)
EOTdfCompleteInfo
visitdata
visitdata <- visit.1538[visit.1538$visit == "EoT" | visit.1538$visit == "EoT_notPerformed",]
visitdata <- visitdata[, c(1,6,8)]
names(visitdata) <- c('patient_id', 'visit','reason')
EOTdf <- merge(responsedata, visitdata, by = "patient_id", incomparables = NA, all = TRUE)
EOTdf
for(i in 1:dim(EOTdf)[1]){
patient_id <- c(patient_id, EOTdf$patient_id[i])
EoTvisit <- c(EoTvisit, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
reason <- c(reason, EOTdf$reason[i])
responseInformation <- c(dataUpToDate, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
###############RESPONSE STARTS HERE##########
#############################################
##subset response
## only evaluating end of treatment as final response
responsedata <- responsedata[responsedata$visit == "EoT",]
responsedata <- responsedata[, c(1,6)]
names(responsedata) <- c('patient_id','response')
##find the EOT date for each patient (that has one)
visitdata <- visit.1538[visit.1538$visit == "EoT" | visit.1538$visit == "EoT_notPerformed",]
visitdata <- visitdata[, c(1,6,8)]
names(visitdata) <- c('patient_id', 'visit','reason')
EOTdf <- merge(responsedata, visitdata, by = "patient_id", incomparables = NA, all = TRUE)
## goal is to combine the information from the visitdata and the response data
patient_id <- EoTVisit <- dataUpToDate <- response <- reason <- NULL
## currently a factor variable
EOTdf$patient_id <- as.character(EOTdf$patient_id)
## get information we need
for(i in 1:dim(EOTdf)[1]){
patient_id <- c(patient_id, EOTdf$patient_id[i])
EoTvisit <- c(EoTvisit, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
reason <- c(reason, EOTdf$reason[i])
responseInformation <- c(dataUpToDate, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
EOTdfCompleteInfo <- data.frame(patient_id, EoTperformed, dataUpToDate, response)
myTable5 <- xtable(EOTdfCompleteInfo, type="latex")
patient_id <- EoTvisit <- dataUpToDate <- response <- reason <- NULL
EOTdf$patient_id <- as.character(EOTdf$patient_id)
for(i in 1:dim(EOTdf)[1]){
patient_id <- c(patient_id, EOTdf$patient_id[i])
EoTvisit <- c(EoTvisit, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
reason <- c(reason, EOTdf$reason[i])
responseInformation <- c(dataUpToDate, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
EOTdfCompleteInfo <- data.frame(patient_id, EoTvisit, reason, dataUpToDate, response)
reason
class(EOTdf$reason)
visitdata <- visit.1538[visi
t.1538$visit == "EoT" | visit.1538$visit == "EoT_notPerformed",]
visitdata <- visit.1538[visit.1538$visit == "EoT" | visit.1538$visit == "EoT_notPerformed",]
visitdata <- visitdata[, c(1,6,8)]
names(visitdata) <- c('patient_id', 'visit','reason')
visitdata$reason <- as.character(visitdata$reason)
EOTdf <- merge(responsedata, visitdata, by = "patient_id", incomparables = NA, all = TRUE)
patient_id <- EoTvisit <- dataUpToDate <- response <- reason <- NULL
EOTdf$patient_id <- as.character(EOTdf$patient_id)
for(i in 1:dim(EOTdf)[1]){
patient_id <- c(patient_id, EOTdf$patient_id[i])
EoTvisit <- c(EoTvisit, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
reason <- c(reason, EOTdf$reason[i])
responseInformation <- c(dataUpToDate, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
EOTdfCompleteInfo <- data.frame(patient_id, EoTvisit, reason, dataUpToDate, response)
EOTdfCompleteInfo
reason
length(reason)
length(patient_id)
length(EoTvisit)
length(dataUpToDate)
for(i in 1:dim(EOTdf)[1]){
patient_id <- c(patient_id, EOTdf$patient_id[i])
EoTvisit <- c(EoTvisit, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
reason <- c(reason, EOTdf$reason[i])
responseInformation <- c(responseInformation, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
EOTdfCompleteInfo <- data.frame(patient_id, EoTvisit, reason, responseInformation, response)
patient_id <- EoTvisit <- responseInformation <- response <- reason <- NULL
EOTdf$patient_id <- as.character(EOTdf$patient_id)
for(i in 1:dim(EOTdf)[1]){
patient_id <- c(patient_id, EOTdf$patient_id[i])
EoTvisit <- c(EoTvisit, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
reason <- c(reason, EOTdf$reason[i])
responseInformation <- c(responseInformation, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
EOTdfCompleteInfo <- data.frame(patient_id, EoTvisit, reason, responseInformation, response)
EOTdfCompleteInfo
EOTdf
##subset response
## only evaluating end of treatment as final response
responsedata <- responsedata[responsedata$visit == "EoT",]
responsedata <- responsedata[, c(1,6)]
names(responsedata) <- c('patient_id','response')
##find the EOT date for each patient (that has one)
visitdata <- visit.1538[visit.1538$visit == "EoT" | visit.1538$visit == "EoT_notPerformed",]
visitdata <- visitdata[, c(1,6,8)]
names(visitdata) <- c('patient_id', 'visit','reason')
visitdata$reason <- as.character(visitdata$reason)
EOTdf <- merge(responsedata, visitdata, by = "patient_id", incomparables = NA, all = TRUE)
## goal is to combine the information from the visitdata and the response data
patient_id <- EoTvisit <- responseInformation <- response <- reason <- NULL
## currently a factor variable
EOTdf$patient_id <- as.character(EOTdf$patient_id)
## get information we need
for(i in 1:dim(EOTdf)[1]){
patient_id <- c(patient_id, EOTdf$patient_id[i])
EoTvisit <- c(EoTvisit, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
reason <- c(reason, EOTdf$reason[i])
responseInformation <- c(responseInformation, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
EOTdfCompleteInfo <- data.frame(patient_id, EoTvisit, reason, responseInformation, response)
responsedata <- responsedata[, c(1,6)]
responsedata <- responsedata[c(1,6),]
responsedata
responsedata <- responsedata[c(1,6)]
responsedata <- responsedata[,c(1,6)]
responsedata <- read.csv("~/Downloads/2017-01-30hem1538response.data.csv", header=T)
visit.1538 <- read.csv("~/Downloads/2017-01-30hem1538visit.data.csv", header=T)
responsedata <- responsedata[responsedata$visit == "EoT",]
responsedata <- responsedata[,c(1,6)]
names(responsedata) <- c('patient_id','response')
visitdata <- visit.1538[visit.1538$visit == "EoT" | visit.1538$visit == "EoT_notPerformed",]
visitdata <- visitdata[, c(1,6,8)]
names(visitdata) <- c('patient_id', 'visit','reason')
visitdata$reason <- as.character(visitdata$reason)
EOTdf <- merge(responsedata, visitdata, by = "patient_id", incomparables = NA, all = TRUE)
patient_id <- EoTvisit <- responseInformation <- response <- reason <- NULL
EOTdf$patient_id <- as.character(EOTdf$patient_id)
for(i in 1:dim(EOTdf)[1]){
patient_id <- c(patient_id, EOTdf$patient_id[i])
EoTvisit <- c(EoTvisit, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
reason <- c(reason, EOTdf$reason[i])
responseInformation <- c(responseInformation, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
EOTdfCompleteInfo <- data.frame(patient_id, EoTvisit, reason, responseInformation, response)
EOTdfCompleteInfo
responsedata$response <- as.character(responsedata$response)
EOTdf <- merge(responsedata, visitdata, by = "patient_id", incomparables = NA, all = TRUE)
patient_id <- EoTvisit <- responseInformation <- response <- reason <- NULL
EOTdf$patient_id <- as.character(EOTdf$patient_id)
for(i in 1:dim(EOTdf)[1]){
patient_id <- c(patient_id, EOTdf$patient_id[i])
EoTvisit <- c(EoTvisit, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
reason <- c(reason, EOTdf$reason[i])
responseInformation <- c(responseInformation, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
EOTdfCompleteInfo
library(doBy)
##reproduce adverse event report
## This code will reproduce adverse event report. This is a frequency table by grade, category, and toxicity
## READ IN THE DATA
## Note: there is one toxicity data file (from file path that is the same), but two different
## names because of how the file was originally created. The compilation of this report
## was created from a few different R-scripts, where toxicity data was defined differently
## toxicitydata3 and toxicitydata2 are read in the same, but used for different parts of the
## report in the coding
##read in toxicity data
tox3.1538 <- read.csv("~/Downloads/2017-01-30hem1538toxicity.data.csv", header=T)
tox2.1538 <- read.csv("~/Downloads/2017-01-30hem1538toxicity.data.csv", header=T)
## read in response data
responsedata <- read.csv("~/Downloads/2017-01-30hem1538response.data.csv", header=T)
## read in visit data
visit.1538 <- read.csv("~/Downloads/2017-01-30hem1538visit.data.csv", header=T)
tox3.1538[is.na(tox3.1538)] <- ""
tox2.1538[is.na(tox2.1538)] <- ""
responsedata[is.na(responsedata)] <- ""
## delete the duplicates
tox3.1538 <- tox3.1538[-which(grepl("_", tox3.1538$id.form.ae)),]
tox2.1538 <- tox2.1538[-which(grepl("_", tox2.1538$id.form.ae)),]
responsedata <- responsedata[responsedata$visit == "EoT",]
responsedata <- responsedata[,c(1,6)]
names(responsedata) <- c('patient_id','response')
responsedata$response <- as.character(responsedata$response)
visitdata <- visit.1538[visit.1538$visit == "EoT" | visit.1538$visit == "EoT_notPerformed",]
visitdata <- visitdata[, c(1,6,8)]
names(visitdata) <- c('patient_id', 'visit','reason')
visitdata$reason <- as.character(visitdata$reason)
EOTdf <- merge(responsedata, visitdata, by = "patient_id", incomparables = NA, all = TRUE)
patient_id <- EoTvisit <- responseInformation <- response <- reason <- NULL
EOTdf$patient_id <- as.character(EOTdf$patient_id)
for(i in 1:dim(EOTdf)[1]){
patient_id <- c(patient_id, EOTdf$patient_id[i])
EoTvisit <- c(EoTvisit, ifelse(EOTdf$visit[i] == "EoT_notPerformed", "No", "Yes"))
reason <- c(reason, EOTdf$reason[i])
responseInformation <- c(responseInformation, ifelse(is.na(EOTdf$response[i]), "No", "Yes"))
response   <- c(response, EOTdf$response[i])
}
EOTdfCompleteInfo <- data.frame(patient_id, EoTvisit, reason, responseInformation, response)
EOTdfCompleteInfo
