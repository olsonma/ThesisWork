options(prType='latex')
## add an id variable
#pbc$id <- 1:dim(pbc)[1]
## keep the first 312 patients
pbc    <- pbc[1:312,]
## factor - having issues with stage when doing aregImpute
#pbc$stage <- factor(pbc$stage)
## Problems 1-6 data set: ignore followuptime, status, and drug
drop <- c("fu.days","status","drug")
pbc.subset <- pbc[,!(names(pbc) %in% drop)]
latex(describe(pbc), file= "")
## remember outcome is time until death or transplant
## variables: bili, albumin, stage, protime, sex, age, spiders, hepatom, ascites, alk.phos, sgot, chol, trig,
## platelet, edema, copper
vc <- varclus(~ bili + albumin + I(stage) + protime + sex + age + spiders + hepatom + ascites + alk.phos + sgot + chol +  trig + platelet + edema + copper, sim="spearman", na.action = na.retain, data = pbc.subset)
plot(vc)
mi <- aregImpute(~ bili + albumin + I(stage) + protime + sex + age + spiders + hepatom + ascites + alk.phos + sgot + chol + trig + platelet + edema + copper, x=TRUE, data = pbc.subset, n.impute = 5)
mi
mi$imputed$chol
mi$imputed$trig
mi$imputed$platelet
mi$imputed$copper
imputedPBC <- data.frame(mi$x)
transObj <- transcan(~ bili + albumin + I(stage) + protime + sex + age + spiders + hepatom + ascites + alk.phos + sgot + chol +
trig + platelet + edema + copper, data = imputedPBC, imputed = FALSE, transformed = TRUE, pl=FALSE, pr=FALSE,
trantab=TRUE)
## using ACE - the dataset used is the imputed dataset (with last imputation from aregImpute)
monotonic <- c("bili", "albumin", "protime", "age", "alk.phos", "sgot", "chol",
"trig", "platelet", "copper")
par(mfrow=c(4,3))
transAceObj <- transace(mi$x, monotonic = monotonic, categorical = c("stage","edema"),
binary = c("sex","spiders","hepatom","ascites"))
View(transAceObj)
## create dataset with tranformations
transformed.imputed.pbc <- data.frame(transAceObj)
## variable clustering
vcTransace <- varclus(~ bili + albumin + stage + protime + sex + age + spiders + hepatom + ascites + alk.phos + sgot + chol +
trig + platelet + edema + copper, sim="pearson", na.action = na.retain, data = transformed.imputed.pbc)
plot(vcTransace)
pc <- prcomp(transAceObj, scale=TRUE)
plot(pc, type = "lines", main="PCA for All Variables")
addscree <- function(x, npcs = min(10, length(x$sdev)), plotv=FALSE, col=1, offset=0.8, adj=0, pr=FALSE){
vars <- x$sdev^2
cumv <- cumsum(vars)/sum(vars)
if(pr) print(cumv)
text(1:npcs, vars[1:npcs] + offset*par('cxy')[2],
as.character(round(cumv[1:npcs],2)),
srt=45, adj=adj, cex=0.65, xpd = NA, col=col)
if(plotv) lines(1:npcs, vars[1:npcs], type = 'b', col=col)
}
addscree(pc, plotv=TRUE, col = 'red', adj=1, offset = -0.8)
par(mfrow=c(1,1))
pc <- prcomp(transAceObj, scale=TRUE)
plot(pc, type = "lines", main="PCA for All Variables")
addscree <- function(x, npcs = min(10, length(x$sdev)), plotv=FALSE, col=1, offset=0.8, adj=0, pr=FALSE){
vars <- x$sdev^2
cumv <- cumsum(vars)/sum(vars)
if(pr) print(cumv)
text(1:npcs, vars[1:npcs] + offset*par('cxy')[2],
as.character(round(cumv[1:npcs],2)),
srt=45, adj=adj, cex=0.65, xpd = NA, col=col)
if(plotv) lines(1:npcs, vars[1:npcs], type = 'b', col=col)
}
addscree(pc, plotv=TRUE, col = 'red', adj=1, offset = -0.8)
include <- c("bili","albumin","hepatom","protime","spiders","alk.phos","sgot","trig","chol","platelet")
subsetPCA <- transAceObj[,include]
pcLab <- prcomp(subsetPCA, scale = TRUE)
plot(pcLab, type = "lines", main="PCA for Lab Variables")
addscree(pcLab, plotv=TRUE, col = 'blue', adj = 1, offset = 1.2)
choose.lambda <- opt.TPO(mi$x)
choose.lambda <- opt.TPO(transAceObj)
sparse <- sPCAgrid(transAceObj, k = 16, method = "sd", center = mean, scale = sd, scores = TRUE, lambda = choose.lambda$pc$lambda,
maxiter = 10)
plot( sparse, type = 'lines', main = 'Sparce PCA')
addscree(sparse)
## transformed dataset
choose.lambda <- opt.TPO(transAceObj)
## show lambda values
choose.lambda$pc$lambda
sparse <- sPCAgrid(transAceObj, k = 16, method = "sd", center = mean, scale = sd, scores = TRUE, lambda = choose.lambda$pc$lambda,
maxiter = 10)
plot( sparse, type = 'lines', main = 'Sparce PCA')
addscree(sparse)
## show loadings with optimal lambdas
sparse$loadings
## with lambda=1
sparseL1 <- sPCAgrid(transAceObj, k = 16, method = "sd", center = mean, scale = sd, scores = TRUE, lambda = 1,
maxiter = 10)
sparseL1$loadings
View(pbc)
pbc <- subset(pbc, !is.na(chol + trig + platelet + copper))
aOrig <- as.matrix(pbc[,Cs(chol, trig, platelet)])
View(aOrig)
View(pbc)
choose.lamgda <- opt.TPO(transObj$transformed)
choose.lambda$pc$lambda
sparse <- sPCAgrid(transAceObj, k = 16, method = "sd", center = mean, scale = sd, scores = TRUE, lambda = choose.lambda$pc$lambda,
maxiter = 10)
plot( sparse, type = 'lines', main = 'Sparce PCA')
addscree(sparse)
sparse <- sPCAgrid(transObj$transformed, k = 16, method = "sd", center = mean, scale = sd, scores = TRUE, lambda = choose.lambda$pc$lambda,
maxiter = 10)
plot( sparse, type = 'lines', main = 'Sparce PCA')
addscree(sparse)
pc <- prcomp(transAceObj, scale=TRUE)
plot(pc, type = "lines", main="PCA for All Variables")
addscree <- function(x, npcs = min(10, length(x$sdev)), plotv=FALSE, col=1, offset=0.8, adj=0, pr=FALSE){
vars <- x$sdev^2
cumv <- cumsum(vars)/sum(vars)
if(pr) print(cumv)
text(1:npcs, vars[1:npcs] + offset*par('cxy')[2],
as.character(round(cumv[1:npcs],2)),
srt=45, adj=adj, cex=0.65, xpd = NA, col=col)
if(plotv) lines(1:npcs, vars[1:npcs], type = 'b', col=col)
}
addscree(pc, plotv=TRUE, col = 'red', adj=1, offset = -0.8)
include <- c("bili","albumin","hepatom","protime","spiders","alk.phos","sgot","trig","chol","platelet")
subsetPCA <- transAceObj[,include]
pcLab <- prcomp(subsetPCA, scale = TRUE)
plot(pcLab, type = "lines", main="PCA for Lab Variables")
addscree(pcLab, plotv=TRUE, col = 'blue', adj = 1, offset = 1.2)
pbc.subset <- subset(pbc.subset, !is.na(chol + trig + platelet + copper))
aOrig <- as.matrix(pbc.subset[,Cs(chol, trig, platelet, copper, alk.phos)])
bOrig <- as.matrix(pbc.subset[,Cs(bili, albumin, protime, sgot, edema)])
cor(pc1(aOrig), pc1(bOrig))
View(bOrig)
View(aOrig)
aOrig <- as.matrix(pbc.subset[,Cs(chol, trig, platelet, copper, alk.phos)])
bOrig <- as.matrix(pbc.subset[,Cs(bili, albumin, protime, sgot)])
cor(pc1(aOrig), pc1(bOrig))
bOrig <- as.matrix(pbc.subset[,Cs(bili, albumin, protime, sgot, sex)]) ## correlation is -0.42
cor(pc1(aOrig), pc1(bOrig))
colnames(aOrig)
ttrans <- function(x){
z <- transace(x, monotonic = colnames(x))
z
}
ttrans(aOrig)
cor(pc1(ttrans(aOrig)), pc1(pc1(bOrig)))
cor(pc1(ttrans(aOrig)), pc1(ttrans(bOrig)))
ttrans(bOrig)
colnames(bOrig)
bOrig <- as.matrix(pbc.subset[,Cs(bili, albumin, protime, sgot)]) ## correlation is -0.42
cor(pc1(ttrans(aOrig)), pc1(ttrans(bOrig)))
cancor1(aOrig, bOrig)
cancor1 <- function(X, Y) cancor(X, Y)$cor[1]
cancor1(aOrig, bOrig)
cancor1(ttrans(aOrig), ttrans(bOrig))
blah <- cancor1(ttrans(aOrig), ttrans(bOrig))
blah <- cancor1(ttrans(aOrig), ttrans(bOrig))
names(blah)
View(pbc)
placeboDat <- pbc[pbc$drug == "placebo"]
placeboDat <- pbc[pbc$drug == "placebo",]
View(placeboDat)
placeboDat <- subset(placeboDat, !is.na(chol + trig + platelet + copper))
S <- with(placeboDat, Surv(fu.days, status))
f <- coxph(S ~ bili, albumin, I(stage), protime, age, alk.phos, sgot, chol, trig, platelet, copper, data = placeboDat)
f <- coxph(S ~ bili + albumin + I(stage) + protime + age + alk.phos + sgot + chol + trig + platelet + copper, data = placeboDat)
f
summary(f)
View(transAceObj)
pcPH <- prcomp(placeboDat, scale=TRUE)
pcPH <- prcomp(matrix(placeboDat), scale=TRUE)
pcPH <- prcomp(as.matrix(placeboDat), scale=TRUE)
placeboDat
class(as.matrix(placeboDat))
pcPH <- prcomp(placeboMat, scale=TRUE)
placeboMat <- as.matrix(placeboDat)
pcPH <- prcomp(placeboMat, scale=TRUE)
View(placeboDat)
?prcomp
placeboMat
placeboMat <- numeric(as.matrix(placeboDat))
pcPH <- prcomp(placeboMat, scale=TRUE)
placeboMat <- as.matrix(numeric(placeboDat))
placeboMat <- as.numeric(as.matrix(placeboDat))
placeboMat
placeboMat <- as.matrix(as.numeric(placeboDat))
placeboMat <- as.matrix(placeboDat)
numeric(placeboMat)
as.numeric(placeboMat)
View(placeboMat)
transObj
placeboDat$Sex <- model.matrix(~sex, data = placeboDat)[-1]
Sex <- model.matrix(~sex, data = placeboDat)[-1]
Sex
as.numeric(placeboDat$sex)
f$x
f <- coxph(S ~ bili + albumin + I(stage) + protime + age + alk.phos + sgot + chol + trig + platelet + copper, data = placeboDat, x=TRUE)
X <- f$x
X
pcPH <- prcomp(X, scale=TRUE)
pcPH
pcPH$rotation
pcPH$rotation$pc1
pcPH$rotation[1]
pcPH$rotation[1,]
pcPH$rotation[,1]
PC2 <- pcPH$rotation[,2]
PC3 <- pcPH$rotation[,3]
PCs <- pc1(X, 3)
pc1 <- function(x, k = 3){
g <- prcom(x, scale=TRUE) g$x[,1:k]
}
pc1 <- function(x, k = 3){
g <- prcom(x, scale=TRUE)
g$x[,1:k]
}
PCs <- pc1(X, 3)
pc1 <- function(x, k = 3){
g <- prcomp(x, scale=TRUE)
g$x[,1:k]
}
PCs <- pc1(X, 3)
PCs
fPC <- coxph(S ~ PCs)
summary(fPC)
fPC
extractAIC(fPC)
extractAIC(f)
f
mi <- aregImpute(~ bili + albumin + I(stage) + protime + sex + age + spiders + hepatom + ascites + alk.phos + sgot + chol + trig + platelet + edema + copper, x=TRUE, data = pbc.subset, n.impute = 5)
mi
sim <- function(B, type = 1){
## put something here
inversions <- 0
for(i in 1:B){
j <- set.of.subscripts.in.current.bootstrap.sample
if(type == 2){
pc3 <- pc1(X[j,],3)
Sj <- S[j,]
for(k in 1:3){
if(cor(pc3orig[j,k], pc3[,k]) <0){
inversions <- inversions + 1
pc3[,k] <- -pc3[,k]
}
}
f <- cph(Sj ~ pc3)
} else f <- cph(S ~ pc3, subset = j)
pc1coef[i] <- coef(f)[1]
orig.coef <- coef(lsfit(X, predict(f)))
## enter something here
}
if(inversions > 0) cat('inversions:', inversions, '\n')
## put something here
}
sim(10)
X
X{"bili",}
X["bili",]
X["bili"]
X[,"bili"]
X[c("bili"),]
summary(f)
f
coef(lsfit(X, predict(f)))
orig.coef["age"]
orig.coef <- coef(lsfit(X, predict(f)))
orig.coef["age"]
names(X)
X
X$age
X[,"age"]
IQR(X[,"age"])
pc1coef[i] <- coef(f)[1]
coef(f)[1]
f <- cph(S ~ pc3, subset = j)
pc3 <- pc1(X[j,],3)
pc3orig <- pc1(X, 3)
j <- sample(\1:length(X[,1]), length(X[,1], replace = TRUE))
j <- sample(1:length(X[,1]), length(X[,1], replace = TRUE))
j <- sample(1:length(X[,1]), length(X[,1]), replace = TRUE)
f <- cph(S ~ pc3, subset = j)
coef(f)[1]
pc3 <- pc1(X, 3)
f <- cph(S ~ pc3, subset = j)
coef(f)[1]
pc3 <- pc1(X, 3)
pc3
pc3orig <- pc1(X, 3)
j <- sample(1:length(X[,1]), length(X[,1]), replace = TRUE)
pc3 <- pc3orig[j,]
pc3
sort(c(2,4,1,5,2,7))
?quantile
pc3orig <- pc1(X, 3)
sim <- function(B, type = 1){
## put something here
## initialize vectors
pc1coef <- c()
IQRage  <- c()
##Frank's code
inversions <- 0
for(i in 1:B){
j <- sample(1:length(X[,1]), length(X[,1]), replace = TRUE)
pc3 <- pc3orig[j,]
if(type == 2){
pc3 <- pc1(X[j,],3)
Sj <- S[j,]
for(k in 1:3){
if(cor(pc3orig[j,k], pc3[,k]) <0){
inversions <- inversions + 1
pc3[,k] <- -pc3[,k]
}
}
f <- cph(Sj ~ pc3)
} else f <- cph(S ~ pc3, subset = j)
pc1coef[i] <- coef(f)[1]
orig.coef <- coef(lsfit(X, predict(f)))
## enter something here
IQRage[i] <- orig.coef["age"]*IQR(X[,"age"])
}
if(inversions > 0) cat('inversions:', inversions, '\n')
## put something here
IQRci <- quantile(IQRage,probs=c(.025, .975))
PCci  <- quantile(pc1coef, probs = c(0.025, 0.975))
}
pc3orig <- pc1(X, 3)
sim <- function(B, type = 1){
## put something here
## initialize vectors
pc1coef <- c()
IQRage  <- c()
##Frank's code
inversions <- 0
for(i in 1:B){
j <- sample(1:length(X[,1]), length(X[,1]), replace = TRUE)
pc3 <- pc3orig[j,]
if(type == 2){
pc3 <- pc1(X[j,],3)
Sj <- S[j,]
for(k in 1:3){
if(cor(pc3orig[j,k], pc3[,k]) <0){
inversions <- inversions + 1
pc3[,k] <- -pc3[,k]
}
}
f <- cph(Sj ~ pc3)
} else f <- cph(S ~ pc3, subset = j)
pc1coef[i] <- coef(f)[1]
orig.coef <- coef(lsfit(X, predict(f)))
## enter something here
IQRage[i] <- orig.coef["age"]*IQR(X[,"age"])
}
if(inversions > 0) cat('inversions:', inversions, '\n')
## put something here
IQRci <- quantile(IQRage,probs=c(.025, .975))
PCci  <- quantile(pc1coef, probs = c(0.025, 0.975))
c(IQRci, PCci)
}
sim(B=1000)
require(Hmisc)
require(rms)
require(pcaPP)
set.seed(02272017)
getHdata(pbc)
options(prType='latex')
## add an id variable
#pbc$id <- 1:dim(pbc)[1]
## keep the first 312 patients
pbc    <- pbc[1:312,]
## factor - having issues with stage when doing aregImpute
#pbc$stage <- factor(pbc$stage)
## Problems 1-6 data set: ignore followuptime, status, and drug
drop <- c("fu.days","status","drug")
pbc.subset <- pbc[,!(names(pbc) %in% drop)]
latex(describe(pbc), file= "")
## remember outcome is time until death or transplant
## variables: bili, albumin, stage, protime, sex, age, spiders, hepatom, ascites, alk.phos, sgot, chol, trig,
## platelet, edema, copper
vc <- varclus(~ bili + albumin + I(stage) + protime + sex + age + spiders + hepatom + ascites + alk.phos + sgot + chol +  trig + platelet + edema + copper, sim="spearman", na.action = na.retain, data = pbc.subset)
plot(vc)
mi <- aregImpute(~ bili + albumin + I(stage) + protime + sex + age + spiders + hepatom + ascites + alk.phos + sgot + chol + trig + platelet + edema + copper, x=TRUE, data = pbc.subset, n.impute = 5)
mi
mi$imputed$chol
mi$imputed$trig
mi$imputed$platelet
mi$imputed$copper
## new dataset with imputed values
imputedPBC <- data.frame(mi$x)
transObj <- transcan(~ bili + albumin + I(stage) + protime + sex + age + spiders + hepatom + ascites + alk.phos + sgot + chol +
trig + platelet + edema + copper, data = imputedPBC, imputed = FALSE, transformed = TRUE, pl=FALSE, pr=FALSE,
trantab=TRUE)
## using ACE - the dataset used is the imputed dataset (with last imputation from aregImpute)
monotonic <- c("bili", "albumin", "protime", "age", "alk.phos", "sgot", "chol",
"trig", "platelet", "copper")
par(mfrow=c(4,3))
transAceObj <- transace(mi$x, monotonic = monotonic, categorical = c("stage","edema"),
binary = c("sex","spiders","hepatom","ascites"))
#par(mfrow=c(1,1))
transformed.imputed.pbc <- data.frame(transAceObj)
vcTransace <- varclus(~ bili + albumin + stage + protime + sex + age + spiders + hepatom + ascites + alk.phos + sgot + chol +
trig + platelet + edema + copper, sim="pearson", na.action = na.retain, data = transformed.imputed.pbc)
plot(vcTransace)
par(mfrow=c(1,1))
pc <- prcomp(transAceObj, scale=TRUE)
plot(pc, type = "lines", main="PCA for All Variables")
addscree <- function(x, npcs = min(10, length(x$sdev)), plotv=FALSE, col=1, offset=0.8, adj=0, pr=FALSE){
vars <- x$sdev^2
cumv <- cumsum(vars)/sum(vars)
if(pr) print(cumv)
text(1:npcs, vars[1:npcs] + offset*par('cxy')[2],
as.character(round(cumv[1:npcs],2)),
srt=45, adj=adj, cex=0.65, xpd = NA, col=col)
if(plotv) lines(1:npcs, vars[1:npcs], type = 'b', col=col)
}
addscree(pc, plotv=TRUE, col = 'red', adj=1, offset = -0.8)
include <- c("bili","albumin","hepatom","protime","spiders","alk.phos","sgot","trig","chol","platelet")
subsetPCA <- transAceObj[,include]
pcLab <- prcomp(subsetPCA, scale = TRUE)
plot(pcLab, type = "lines", main="PCA for Lab Variables")
addscree(pcLab, plotv=TRUE, col = 'blue', adj = 1, offset = 1.2)
choose.lambda <- opt.TPO(transAceObj)
choose.lambda$pc$lambda
sparse <- sPCAgrid(transAceObj, k = 16, method = "sd", center = mean, scale = sd, scores = TRUE, lambda = choose.lambda$pc$lambda,
maxiter = 10)
plot( sparse, type = 'lines', main = 'Sparce PCA')
addscree(sparse)
sparse$loadings
sparseL1 <- sPCAgrid(transAceObj, k = 16, method = "sd", center = mean, scale = sd, scores = TRUE, lambda = 1,
maxiter = 10)
sparseL1$loadings
ttrans <- function(x){
z <- transace(x, monotonic = colnames(x))
z
}
pbc.subset <- subset(pbc.subset, !is.na(chol + trig + platelet + copper))
aOrig <- as.matrix(pbc.subset[,Cs(chol, trig, platelet, copper, alk.phos)])
bOrig <- as.matrix(pbc.subset[,Cs(bili, albumin, protime, sgot)]) ## correlation is -0.42
cor(pc1(aOrig), pc1(bOrig))
cor(pc1(ttrans(aOrig)), pc1(ttrans(bOrig)))  ## correlation is -0.43
cancor1 <- function(X, Y) cancor(X, Y)$cor[1]
pbc.subset <- subset(pbc.subset, !is.na(chol + trig + platelet + copper))
aOrig <- as.matrix(pbc.subset[,Cs(chol, trig, platelet, copper, alk.phos)])
bOrig <- as.matrix(pbc.subset[,Cs(bili, albumin, protime, sgot)]) ## correlation is -0.42
cor(pc1(aOrig), pc1(bOrig))
cor(pc1(ttrans(aOrig)), pc1(ttrans(bOrig)))  ## correlation is -0.43
mi <- aregImpute(~ bili + albumin + I(stage) + protime + sex + age + spiders + hepatom + ascites + alk.phos + sgot + chol + trig + platelet + edema + copper, x=TRUE, data = pbc.subset, n.impute = 5)
mi
?transace
require(Hmisc)
require(rms)
require(pcaPP)
set.seed(02272017)
getHdata(pbc)
options(prType='latex')
## add an id variable
#pbc$id <- 1:dim(pbc)[1]
## keep the first 312 patients
pbc    <- pbc[1:312,]
## factor - having issues with stage when doing aregImpute
#pbc$stage <- factor(pbc$stage)
## Problems 1-6 data set: ignore followuptime, status, and drug
drop <- c("fu.days","status","drug")
pbc.subset <- pbc[,!(names(pbc) %in% drop)]
latex(describe(pbc), file= "")
View(pbc.subset)
sum(is.na(pbs.subset$stage))
sum(is.na(pbc.subset$stage))
View(pbc.subset)
IQR
sim(B=1000, type = 1)
pc3orig <- pc1(X, 3)
sim <- function(B, type = 1){
## put something here
## initialize vectors
pc1coef <- c()
IQRage  <- c()
##Frank's code
inversions <- 0
for(i in 1:B){
j <- sample(1:length(X[,1]), length(X[,1]), replace = TRUE)
pc3 <- pc3orig[j,]
if(type == 2){
pc3 <- pc1(X[j,],3)
Sj <- S[j,]
for(k in 1:3){
if(cor(pc3orig[j,k], pc3[,k]) <0){
inversions <- inversions + 1
pc3[,k] <- -pc3[,k]
}
}
f <- cph(Sj ~ pc3)
} else f <- cph(S ~ pc3, subset = j)
pc1coef[i] <- coef(f)[1]
orig.coef <- coef(lsfit(X, predict(f)))
## enter something here
IQRage[i] <- orig.coef["age"]*IQR(X[,"age"])
}
if(inversions > 0) cat('inversions:', inversions, '\n')
## put something here
IQRci <- quantile(IQRage,probs=c(.025, .975))
PCci  <- quantile(pc1coef, probs = c(0.025, 0.975))
c(IQRci, PCci)
}
require(Hmisc)
require(rms)
require(pcaPP)
set.seed(02272017)
getHdata(pbc)
options(prType='latex')
## add an id variable
#pbc$id <- 1:dim(pbc)[1]
## keep the first 312 patients
pbc    <- pbc[1:312,]
## factor - having issues with stage when doing aregImpute
#pbc$stage <- factor(pbc$stage)
## Problems 1-6 data set: ignore followuptime, status, and drug
drop <- c("fu.days","status","drug")
pbc.subset <- pbc[,!(names(pbc) %in% drop)]
latex(describe(pbc), file= "")
