changDesAlter <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- pbinom(a, n1, p0) ## probability of early termination under the null#
    pet1 <- pbinom(a, n1, p1)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  print(paste0("pet0: ", pet0))#
  ## find A star#
  for(i in 1:n1a){#
  	print()#
  	pet0i <- pbinom(i, n1a, p0)#
  	print(paste0("i: ", i, "pet0: ", pet0))#
  	if(pet0i > pet0){#
  		astar <- i#
  		break#
  	}#
  }#
  astar <- ifelse( abs(probRight - betaM) < abs(probLeft - betaM), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
changDesAlter(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)
## currently, these files are matching. #
changDesAlter <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- pbinom(a, n1, p0) ## probability of early termination under the null#
    pet1 <- pbinom(a, n1, p1)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  print(paste0("pet0: ", pet0))#
  ## find A star#
  for(i in 1:n1a){#
  	pet0i <- pbinom(i, n1a, p0)#
  	print(paste0("i: ", i, "pet0: ", pet0))#
  	if(pet0i > pet0){#
  		astar <- i#
  		break#
  	}#
  }#
  astar <- ifelse( abs(probRight - betaM) < abs(probLeft - betaM), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
changDesAlter(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)
## currently, these files are matching. #
changDesAlter <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- pbinom(a, n1, p0) ## probability of early termination under the null#
    pet1 <- pbinom(a, n1, p1)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  print(paste0("pet0: ", pet0))#
  ## find A star#
  for(i in 1:n1a){#
  	pet0i <- pbinom(i, n1a, p0)#
  	print(paste0("i: ", i, "pet0: ", pet0))#
  	if(pet0i > pet0){#
  		astar <- i#
  		break#
  	}#
  }#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
changDesAlter(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)
## currently, these files are matching. #
changDesAlter <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- pbinom(a, n1, p0) ## probability of early termination under the null#
    pet1 <- pbinom(a, n1, p1)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  print(paste0("pet0: ", pet0))#
  ## find A star#
  for(i in 1:n1a){#
  	pet0i <- pbinom(i, n1a, p0)#
  	print(paste0("i: ", i, "pet0: ", pet0))#
  	if(pet0i >= pet0){#
  		astar <- i#
  		break#
  	}#
  }#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
changDesAlter(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)
## currently, these files are matching. #
changDesAlter <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- round(pbinom(a, n1, p0),3) ## probability of early termination under the null#
    pet1 <- round(pbinom(a, n1, p1),3)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  print(paste0("pet0: ", pet0))#
  ## find A star#
  for(i in 1:n1a){#
  	pet0i <- round(pbinom(i, n1a, p0),3)#
  	print(paste0("i: ", i, "pet0: ", pet0))#
  	if(pet0i >= pet0){#
  		astar <- i#
  		break#
  	}#
  }#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
changDesAlter(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)
## currently, these files are matching. #
changDesAlter <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- round(pbinom(a, n1, p0),3) ## probability of early termination under the null#
    pet1 <- round(pbinom(a, n1, p1),3)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  print(paste0("pet0: ", pet0))#
  ## find A star#
  for(i in 1:n1a){#
  	pet0i <- round(pbinom(i, n1a, p0),3)#
  	print(paste0("i: ", i, " pet0: ", pet0))#
  	if(pet0i >= pet0){#
  		astar <- i#
  		break#
  	}#
  }#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
changDesAlter(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)
## currently, these files are matching. #
changDesAlter <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- round(pbinom(a, n1, p0),3) ## probability of early termination under the null#
    pet1 <- round(pbinom(a, n1, p1),3)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  print(paste0("pet0: ", pet0))#
  ## find A star#
  for(i in 1:n1a){#
  	pet0i <- round(pbinom(i, n1a, p0),3)#
  	print(paste0("i: ", i, " pet0i: ", pet0i))#
  	if(pet0i >= pet0){#
  		astar <- i#
  		break#
  	}#
  }#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
changDesAlter(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)
changDes(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 19, nta = 43, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6)
changDesAlter(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 19, nta = 43, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6)
## currently, these files are matching. #
changDesAlter <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- round(pbinom(a, n1, p0),3) ## probability of early termination under the null#
    pet1 <- round(pbinom(a, n1, p1),3)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## find astar#
  aRight   <- NULL#
  petRight <- NULL#
  aLeft    <- NULL#
  petLeft  <- NULL#
  print(paste0("pet0: ", pet0))#
  ## find A star#
  for(i in 1:n1a){#
  	pet0i <- round(pbinom(i, n1a, p0),3)#
  	print(paste0("i: ", i, " pet0i: ", pet0i))#
  	if(pet0i >= pet0){#
  		aRight   <- i#
  		aLeft    <- i-1#
  		petRight <- round(pbinom(i, n1a, p0),3)#
		petLeft  <- round(pbinom(i-1, n1a, p0),3)#
  		break#
  	}#
  }#
  astar <- ifelse( abs(petRight - pet0) < abs(petLeft - pet0), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
changDesAlter(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 19, nta = 43, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6)
Design    <- matrix(c("Chang","ChangAlter"), nrow=2)
Design
changDesCompare <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
	Design    <- matrix(c("Chang","Chang Alter"), nrow=2)#
	chang     <-      changDes(a   = a,   c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            				   n1a = n1a, nta = nta,#
              				   p0  = p0,   p1 = p1)#
 	changAlter<- changDesAlter(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)             					 #
	dfCompare <- cbind(changDes, changAlter)               	#
}
changDesCompare(a   = a,    c  = c, beta = beta, alpha = alpha,
n1  = n1,   nt = nt,
p0  = p0,   p1 = p1)
changDesCompare(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)
changDes <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- pbinom(a, n1, p0) ## probability of early termination under the null#
    pet1 <- pbinom(a, n1, p1)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## defining beta, equation 9 in paper#
  beta1 <- pbinom(a, n1, p1)#
  betaM <- NULL#
  if(m <= n1){#
    betaM <- beta1*(m/n1)#
  }#
  if(m > n1){#
    betaM <- beta1 + ((beta-beta1)*(m-n1))/(nt-n1)#
  }	#
  ## find Astar#
  aRight 	  <- NULL#
  probRight <- NULL#
  aLeft     <- NULL#
  probLeft  <- NULL#
  for(i in 1:n1a){#
    if(pbinom(i, n1a, p1) > betaM){#
      aRight    <- i#
      aLeft     <- i-1#
      probRight <- pbinom(i, n1a, p1)#
      probLeft  <- pbinom(i-1, n1a, p1)#
      break#
    }#
  }#
  astar <- ifelse( abs(probRight - betaM) < abs(probLeft - betaM), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
changDesCompare(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)
changDesAlter(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)
## changDesAlter is a function that is based on the paper Chang et al, but uses probability of early termination#
## as a basis of choosing the first critical value. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDesAlter <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- round(pbinom(a, n1, p0),3) ## probability of early termination under the null#
    pet1 <- round(pbinom(a, n1, p1),3)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## find astar#
  aRight   <- NULL#
  petRight <- NULL#
  aLeft    <- NULL#
  petLeft  <- NULL#
  ## find A star#
  for(i in 1:n1a){#
  	pet0i <- round(pbinom(i, n1a, p0),3)#
  	if(pet0i >= pet0){#
  		aRight   <- i#
  		aLeft    <- i-1#
  		petRight <- round(pbinom(i, n1a, p0),3)#
		petLeft  <- round(pbinom(i-1, n1a, p0),3)#
  		break#
  	}#
  }#
  astar <- ifelse( abs(petRight - pet0) < abs(petLeft - pet0), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
changDes(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)
changDesCompare(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)
changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6)
changDesCompare <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
	Design    <- matrix(c("Chang","Chang Alter"), nrow=2)#
	chang     <-      as.matrix(changDes(a   = a,   c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            				   n1a = n1a, nta = nta,#
              				   p0  = p0,   p1 = p1))#
 	changAlter<- as.matrix(changDesAlter(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)  )           					 #
	dfCompare <- cbind(changDes, changAlter)               	#
}#
changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6)
changDesCompare <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
	Design    <- matrix(c("Chang","Chang Alter"), nrow=2)#
	chang     <-      as.matrix(changDes(a   = a,   c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            				   n1a = n1a, nta = nta,#
              				   p0  = p0,   p1 = p1))#
 	changAlter<- as.matrix(changDesAlter(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)  )           					 #
	dfCompare <- cbind(changDes, changAlter)#
	return(dfCompare)               	#
}#
changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6)
changDesCompare <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
	Design    <- matrix(c("Chang","Chang Alter"), nrow=2)#
	chang     <-     as.matrix(changDes(a   = a,   c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            				   n1a = n1a, nta = nta,#
              				   p0  = p0,   p1 = p1))#
 	changAlter<- as.matrix(changDesAlter(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)  )           					 #
	dfCompare <- rbind(chang, changAlter)#
	return(dfCompare)               	#
}#
changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6)
changDesCompare <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
	Design    <- matrix(c("Chang","Chang Alter"), nrow=2)#
	chang     <-     as.matrix(changDes(a   = a,   c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            				   n1a = n1a, nta = nta,#
              				   p0  = p0,   p1 = p1))#
 	changAlter<- as.matrix(changDesAlter(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)  )           					 #
	dfCompare <- rbind(chang, changAlter)#
	dfCompare <- cbind(Design, dfCompare)#
	return(dfCompare)               	#
}#
changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6)
changDesCompare <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
	Design    <- matrix(c("Chang","Chang Alter"), nrow=2)#
	chang     <-     as.matrix(changDes(a   = a,   c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            				   n1a = n1a, nta = nta,#
              				   p0  = p0,   p1 = p1))#
 	changAlter<- as.matrix(changDesAlter(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)  )           					 #
	dfCompare <- rbind(chang, changAlter)#
	dfCompare <- data.frame(cbind(Design, dfCompare))#
	return(dfCompare)               	#
}#
changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6)
changDesCompare <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
	Design    <- matrix(c("Chang","Chang Alter"), nrow=2)#
	chang     <-     as.matrix(changDes(a   = a,   c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            				   n1a = n1a, nta = nta,#
              				   p0  = p0,   p1 = p1))#
 	changAlter<- as.matrix(changDesAlter(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)  )           					 #
	dfCompare <- rbind(chang, changAlter)#
	dfCompare <- cbind(Design, dfCompare)#
	dfCompare <- data.frame(Design = Design, dfCompare)#
	return(dfCompare)               	#
}#
changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6)
changDesCompare <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
	Design    <- matrix(c("Chang","Chang Alter"), nrow=2)#
	chang     <-     as.matrix(changDes(a   = a,   c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            				   n1a = n1a, nta = nta,#
              				   p0  = p0,   p1 = p1))#
 	changAlter<- as.matrix(changDesAlter(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)  )           					 #
	dfCompare <- rbind(chang, changAlter)#
	dfCompare <- data.frame(Design = Design, dfCompare)#
	return(dfCompare)               	#
}#
changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6)
dfCompare <- NULL#
#
dfCompare <- changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 19, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 19, nta = 43, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 21, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 21, nta = 45, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 23, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 21, nta = 47, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 16, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 16, nta = 40, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 18, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 18, nta = 42, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 20, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 20, nta = 44, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 10, nta = 41, #
                         p0  = 0.4, p1 = 0.6))	#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 10, nta = 34,#
                         p0  = 0.4, p1 = 0.6))	#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 24, nta = 48, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))
dfCompare
blah <- as.matrix(changDesAlter(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6))
dim(blah)
changDesCompare <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
	Design    <- matrix(c("Chang","Chang Alter"), nrow=2)#
	chang     <-     as.matrix(changDes(a   = a,   c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            				   n1a = n1a, nta = nta,#
              				   p0  = p0,   p1 = p1))#
 	changAlter<- as.matrix(changDesAlter(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)  )           					 #
	dfCompare <- rbind(chang, changAlter, rep("", dim(chang)[2]))#
	dfCompare <- data.frame(Design = Design, dfCompare)#
	return(dfCompare)               	#
}#
changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6)
rbind(blah, blah, rep("", dim(blah)[2]))
changDesCompare <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
	Design    <- matrix(c("Chang","Chang Alter",""), nrow=2)#
	chang     <-     as.matrix(changDes(a   = a,   c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            				   n1a = n1a, nta = nta,#
              				   p0  = p0,   p1 = p1))#
 	changAlter<- as.matrix(changDesAlter(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)  )           					 #
	dfCompare <- rbind(chang, changAlter, rep("", dim(chang)[2]))#
	dfCompare <- data.frame(Design = Design, dfCompare)#
	return(dfCompare)               	#
}#
changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6)
changDesCompare <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
	Design    <- matrix(c("Chang","Chang Alter",""), nrow=3)#
	chang     <-     as.matrix(changDes(a   = a,   c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            				   n1a = n1a, nta = nta,#
              				   p0  = p0,   p1 = p1))#
 	changAlter<- as.matrix(changDesAlter(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)  )           					 #
	dfCompare <- rbind(chang, changAlter, rep("", dim(chang)[2]))#
	dfCompare <- data.frame(Design = Design, dfCompare)#
	return(dfCompare)               	#
}#
changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6)
dfCompare <- NULL#
#
dfCompare <- changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 19, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 19, nta = 43, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 21, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 21, nta = 45, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 23, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 21, nta = 47, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 16, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 16, nta = 40, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 18, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 18, nta = 42, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 20, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 20, nta = 44, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 10, nta = 41, #
                         p0  = 0.4, p1 = 0.6))	#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 10, nta = 34,#
                         p0  = 0.4, p1 = 0.6))	#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 24, nta = 48, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))
dfCompare
rbinom(1,1,.5)
n <- 10#
vectorA <- numeric(n)#
vectorB <- numeric(n)#
probA   <- numeric(n)#
X       <- numeric(n)#
#
for(i in 1:n){#
	vectorA[i] <- rbinom(1,1,.5) ## randomly draws 1 or 0#
		print(paste0("i= ", i, ", VectorA=" vectorA))#
	vectorB[i] <- rbinom(1,1,.5)#
		print(paste0("i= ", i, ", VectorB=" vectorB))#
	probA[i]   <-  sum(vectorA)/i#
		print(paste0("sum of VectorA= ", sum(vectorA), ", i=", i, ", sum/i=" sum(vectorA)/i))#
	X          <- vectorA[i] + vectorB[i]#
		print(poste0("X= ",X))#
}
n <- 10#
vectorA <- numeric(n)#
vectorB <- numeric(n)#
probA   <- numeric(n)#
X       <- numeric(n)#
#
for(i in 1:n){#
	vectorA[i] <- rbinom(1,1,.5) ## randomly draws 1 or 0#
		print(paste0("i= ", i, ", VectorA=", vectorA))#
	vectorB[i] <- rbinom(1,1,.5)#
		print(paste0("i= ", i, ", VectorB=", vectorB))#
	probA[i]   <-  sum(vectorA)/i#
		print(paste0("sum of VectorA= ", sum(vectorA), ", i=", i, ", sum/i=" sum(vectorA)/i))#
	X          <- vectorA[i] + vectorB[i]#
		print(poste0("X= ",X))#
}
n <- 10#
vectorA <- numeric(n)#
vectorB <- numeric(n)#
probA   <- numeric(n)#
X       <- numeric(n)#
#
for(i in 1:n){#
	vectorA[i] <- rbinom(1,1,.5) ## randomly draws 1 or 0#
		print(paste0("i= ", i, ", VectorA=", vectorA))#
	vectorB[i] <- rbinom(1,1,.5)#
		print(paste0("i= ", i, ", VectorB=", vectorB))#
	probA[i]   <-  sum(vectorA)/i#
		print(paste0("sum of VectorA= ", sum(vectorA), ", i=", i, ", sum/i=", sum(vectorA)/i))#
	X          <- vectorA[i] + vectorB[i]#
		print(poste0("X= ",X))#
}
n <- 10#
vectorA <- numeric(n)#
vectorB <- numeric(n)#
probA   <- numeric(n)#
X       <- numeric(n)#
#
for(i in 1:n){#
	vectorA[i] <- rbinom(1,1,.5) ## randomly draws 1 or 0#
		print(paste0("i= ", i, ", VectorA=", vectorA))#
	vectorB[i] <- rbinom(1,1,.5)#
		print(paste0("i= ", i, ", VectorB=", vectorB))#
	probA[i]   <-  sum(vectorA)/i#
		print(paste0("sum of VectorA= ", sum(vectorA), ", i=", i, ", sum/i=", sum(vectorA)/i))#
	X          <- vectorA[i] + vectorB[i]#
		print(paste0("X= ",X))#
}
n <- 10#
vectorA <- numeric(n)#
vectorB <- numeric(n)#
probA   <- numeric(n)#
X       <- numeric(n)#
#
for(i in 1:n){#
	vectorA[i] <- rbinom(1,1,.5) ## randomly draws 1 or 0#
		print(c("a",vectorA))#
	vectorB[i] <- rbinom(1,1,.5)#
		print(paste0("i= ", i, ", VectorB=", vectorB))#
	probA[i]   <-  sum(vectorA)/i#
		print(paste0("sum of VectorA= ", sum(vectorA), ", i=", i, ", sum/i=", sum(vectorA)/i))#
	X          <- vectorA[i] + vectorB[i]#
		print(paste0("X= ",X))#
}
n <- 10#
vectorA <- numeric(n)#
vectorB <- numeric(n)#
probA   <- numeric(n)#
X       <- numeric(n)#
#
for(i in 1:n){#
	vectorA[i] <- rbinom(1,1,.5) ## randomly draws 1 or 0#
		print(c("i= ",i, "vectorA= ",vectorA))#
	vectorB[i] <- rbinom(1,1,.5)#
		print(paste0("i= ", i, ", VectorB=", vectorB))#
	probA[i]   <-  sum(vectorA)/i#
		print(paste0("sum of VectorA= ", sum(vectorA), ", i=", i, ", sum/i=", sum(vectorA)/i))#
	X          <- vectorA[i] + vectorB[i]#
		print(paste0("X= ",X))#
}
n <- 10#
vectorA <- numeric(n)#
vectorB <- numeric(n)#
probA   <- numeric(n)#
X       <- numeric(n)#
#
for(i in 1:n){#
	vectorA[i] <- rbinom(1,1,.5) ## randomly draws 1 or 0#
		print(c("i= ",i, "vectorA= ",vectorA))#
	vectorB[i] <- rbinom(1,1,.5)#
		print(c("i= ",i, "vectorB= ",vectorB))#
	probA[i]   <-  sum(vectorA)/i#
		print(paste0("sum of VectorA= ", sum(vectorA), ", i=", i, ", sum/i=", sum(vectorA)/i))#
	X          <- vectorA[i] + vectorB[i]#
		print(paste0("X= ",X))#
}
n <- 10#
vectorA <- numeric(n)#
vectorB <- numeric(n)#
sumA   <- numeric(n)#
X       <- numeric(n)#
#
for(i in 1:n){#
	vectorA[i] <- rbinom(1,1,.5) ## randomly draws 1 or 0#
		print(c("i= ",i, "vectorA= ",vectorA))#
	vectorB[i] <- rbinom(1,1,.5)#
		print(c("i= ",i, "vectorB= ",vectorB))#
	sumA[i]   <-  sum(vectorA)#
		print(paste0("sum of VectorA= ", sumA[i])#
	X          <- vectorA[i] + vectorB[i]#
		print(paste0("X= ",X))#
}
n <- 10#
vectorA <- numeric(n)#
vectorB <- numeric(n)#
sumA   <- numeric(n)#
X       <- numeric(n)#
#
for(i in 1:n){#
	vectorA[i] <- rbinom(1,1,.5) ## randomly draws 1 or 0#
		print(c("i= ",i, "vectorA= ",vectorA))#
	vectorB[i] <- rbinom(1,1,.5)#
		print(c("i= ",i, "vectorB= ",vectorB))#
	sumA[i]   <-  sum(vectorA)#
		print(paste0("sum of VectorA= ", sumA[i]))#
	X          <- vectorA[i] + vectorB[i]#
		print(paste0("X= ",X))#
}
n <- 10#
vectorA <- c() ## initialize vectors#
vectorB <- c()#
probA   <- c()#
X       <- c()#
#
for(i in 1:n){#
	X <- rbinom(1,1,0.5) ## generate a random number that is 0 or 1#
	if(X == 0){ ## if the random number is 0, put a 1 in vectorA and a 0 in vector B#
		vectorA[i] <- 1#
		vectorB[i] <- 0#
	}#
	print(c("i = ", vectorA))#
	print(c("i = ", vectorB))#
	probA <- sum(vectorA)/i#
	print(c("probA = ", probA))#
}
n <- 10#
vectorA <- c() ## initialize vectors#
vectorB <- c()#
probA   <- c()#
#
for(i in 1:n){#
	X <- rbinom(1,1,0.5) ## generate a random number that is 0 or 1#
	if(X == 0){ ## if the random number is 0, put a 1 in vectorA and a 0 in vector B#
		vectorA[i] <- 1#
		vectorB[i] <- 0#
	}#
	print(c("i = ", vectorA))#
	print(c("i = ", vectorB))#
	probA <- sum(vectorA)/i#
	print(c("probA = ", probA))#
}
n <- 10#
vectorA <- c() ## initialize vectors#
vectorB <- c()#
probA   <- c()#
#
for(i in 1:n){#
	X <- rbinom(1,1,0.5) ## generate a random number that is 0 or 1#
	if(X == 0){ ## if the random number is 0, put a 1 in vectorA and a 0 in vector B#
		vectorA[i] <- 1#
		vectorB[i] <- 0#
	}#
	if(X == 1){ ## if the random number is 1, put a 1 in vectorB and a 0 in vectorA#
		vectorB[i] <- 1#
		vectorA[i] <- 0	#
	}#
	print(c("i = ", vectorA))#
	print(c("i = ", vectorB))#
	probA <- sum(vectorA)/i#
	print(c("probA = ", probA))#
}
n <- 10#
vectorA <- rep(NA, n) ## initialize vectors#
vectorB <- rep(NA, n)#
probA   <- rep(NA, n)#
#
for(i in 1:n){#
	X <- rbinom(1,1,0.5) ## generate a random number that is 0 or 1#
	if(X == 0){ ## if the random number is 0, put a 1 in vectorA and a 0 in vector B#
		vectorA[i] <- 1#
		vectorB[i] <- 0#
	}#
	if(X == 1){ ## if the random number is 1, put a 1 in vectorB and a 0 in vectorA#
		vectorB[i] <- 1#
		vectorA[i] <- 0	#
	}#
	print(c("i = ", vectorA))#
	print(c("i = ", vectorB))#
	probA <- sum(vectorA)/i#
	print(c("probA = ", probA))#
}
n <- 10#
vectorA <- rep(NA, n) ## initialize vectors#
vectorB <- rep(NA, n)#
probA   <- rep(NA, n)#
#
vectorA#
vectorB#
for(i in 1:n){#
	X <- rbinom(1,1,0.5) ## generate a random number that is 0 or 1#
	if(X == 0){ ## if the random number is 0, put a 1 in vectorA and a 0 in vector B#
		vectorA[i] <- 1#
		vectorB[i] <- 0#
	}#
	if(X == 1){ ## if the random number is 1, put a 1 in vectorB and a 0 in vectorA#
		vectorB[i] <- 1#
		vectorA[i] <- 0	#
	}#
	print(c("i = ", vectorA))#
	print(c("i = ", vectorB))#
	probA <- sum(vectorA)/i#
	print(c("probA = ", probA))#
}
vectorA
vectorA <- rep(NA, n) ## initialize vectors
vectorA
df <- data.frame(A = vectorA, B = vectorB, probabilityA = probA)
df
n <- 10#
vectorA <- rep(NA, n) ## initialize vectors#
vectorB <- rep(NA, n)#
probA   <- rep(NA, n)#
#
## view the initialized vectors#
vectorA#
vectorB#
#
## start a simulation#
for(i in 1:n){#
	X <- rbinom(1,1,0.5) ## generate a random number that is 0 or 1#
	if(X == 0){ ## if the random number is 0, put a 1 in vectorA and a 0 in vector B#
		vectorA[i] <- 1#
		vectorB[i] <- 0#
	}#
	if(X == 1){ ## if the random number is 1, put a 1 in vectorB and a 0 in vectorA#
		vectorB[i] <- 1#
		vectorA[i] <- 0	#
	}#
	print(c("i = ", vectorA))#
	print(c("i = ", vectorB))#
	probA <- sum(vectorA)/i#
	print(c("probA = ", probA))#
}#
#
## make a dataframe with the simulated information#
df <- data.frame(A = vectorA, B = vectorB, probabilityA = probA)#
df
n <- 10#
vectorA <- rep(NA, n) ## initialize vectors#
vectorB <- rep(NA, n)#
probA   <- rep(NA, n)#
#
## view the initialized vectors#
vectorA#
vectorB#
#
## start a simulation#
for(i in 1:n){#
	X <- rbinom(1,1,0.5) ## generate a random number that is 0 or 1#
	if(X == 0){ ## if the random number is 0, put a 1 in vectorA and a 0 in vector B#
		vectorA[i] <- 1#
		vectorB[i] <- 0#
	}#
	if(X == 1){ ## if the random number is 1, put a 1 in vectorB and a 0 in vectorA#
		vectorB[i] <- 1#
		vectorA[i] <- 0	#
	}#
	print(c("i = ", vectorA))#
	print(c("i = ", vectorB))#
	probA <- sum(vectorA)/i#
	print(sum(!is.na(vectorA))#
	print(c("probA = ", probA))#
}
n <- 10#
vectorA <- rep(NA, n) ## initialize vectors#
vectorB <- rep(NA, n)#
probA   <- rep(NA, n)#
#
## view the initialized vectors#
vectorA#
vectorB#
#
## start a simulation#
for(i in 1:n){#
	X <- rbinom(1,1,0.5) ## generate a random number that is 0 or 1#
	if(X == 0){ ## if the random number is 0, put a 1 in vectorA and a 0 in vector B#
		vectorA[i] <- 1#
		vectorB[i] <- 0#
	}#
	if(X == 1){ ## if the random number is 1, put a 1 in vectorB and a 0 in vectorA#
		vectorB[i] <- 1#
		vectorA[i] <- 0	#
	}#
	print(c("i = ", vectorA))#
	print(c("i = ", vectorB))#
	probA <- sum(vectorA)/i#
	print(sum(!is.na(vectorA)))#
	print(c("probA = ", probA))#
}
n <- 10#
vectorA <- rep(NA, n) ## initialize vectors#
vectorB <- rep(NA, n)#
probA   <- rep(NA, n)#
#
## view the initialized vectors#
vectorA#
vectorB#
#
## start a simulation#
for(i in 1:n){#
	X <- rbinom(1,1,0.5) ## generate a random number that is 0 or 1#
	if(X == 0){ ## if the random number is 0, put a 1 in vectorA and a 0 in vector B#
		vectorA[i] <- 1#
		vectorB[i] <- 0#
	}#
	if(X == 1){ ## if the random number is 1, put a 1 in vectorB and a 0 in vectorA#
		vectorB[i] <- 1#
		vectorA[i] <- 0	#
	}#
	print(c("i = ", vectorA))#
	print(c("i = ", vectorB))#
	probA <- sum(!is.na(vectorA))/i#
	print(c("probA = ", probA))#
}#
#
## make a dataframe with the simulated information#
df <- data.frame(A = vectorA, B = vectorB, probabilityA = probA)#
df
blah <- c(1,1,NA,NA)
sum(blah)
sum(!is.na(blah))
sum(!is.na(blah))/3
n <- 10#
vectorA <- rep(NA, n) ## initialize vectors#
vectorB <- rep(NA, n)#
probA   <- rep(NA, n)#
#
## view the initialized vectors#
vectorA#
vectorB#
#
## start a simulation#
for(i in 1:1){#
	X <- rbinom(1,1,0.5) ## generate a random number that is 0 or 1#
	if(X == 0){ ## if the random number is 0, put a 1 in vectorA and a 0 in vector B#
		vectorA[i] <- 1#
		vectorB[i] <- 0#
	}#
	if(X == 1){ ## if the random number is 1, put a 1 in vectorB and a 0 in vectorA#
		vectorB[i] <- 1#
		vectorA[i] <- 0	#
	}#
	print(c("i = ", vectorA))#
	print(c("i = ", vectorB))#
	probA <- sum(!is.na(vectorA))/i#
	print(c("probA = ", probA))#
}
n <- 10#
vectorA <- rep(NA, n) ## initialize vectors#
vectorB <- rep(NA, n)#
probA   <- rep(NA, n)#
#
## view the initialized vectors#
vectorA#
vectorB#
#
## start a simulation#
for(i in 1:3){#
	X <- rbinom(1,1,0.5) ## generate a random number that is 0 or 1#
	if(X == 0){ ## if the random number is 0, put a 1 in vectorA and a 0 in vector B#
		vectorA[i] <- 1#
		vectorB[i] <- 0#
	}#
	if(X == 1){ ## if the random number is 1, put a 1 in vectorB and a 0 in vectorA#
		vectorB[i] <- 1#
		vectorA[i] <- 0	#
	}#
	print(c("i = ", vectorA))#
	print(c("i = ", vectorB))#
	probA <- sum(!is.na(vectorA))/i#
	print(c("probA = ", probA))#
}
sum(!is.na(vectorA))/i
i
!is.na(vectorA)
sum(!is.na(vectorA))
sum(which(!is.na(vectorA)))
n <- 10#
vectorA <- numeric(n) ## initialize vectors#
vectorB <- numeric(n)#
probA   <- numeric(n)#
#
## view the initialized vectors#
vectorA#
vectorB#
#
## start a simulation#
for(i in 1:3){#
	X <- rbinom(1,1,0.5) ## generate a random number that is 0 or 1#
	if(X == 0){ ## if the random number is 0, put a 1 in vectorA and a 0 in vector B#
		vectorA[i] <- 1#
	}#
	if(X == 1){ ## if the random number is 1, put a 1 in vectorB and a 0 in vectorA#
		vectorB[i] <- 1#
	}#
	print(c("i = ", vectorA))#
	print(c("i = ", vectorB))#
	probA <- sum(vectorA)/i#
	print(c("probA = ", probA))#
}
n <- 10#
vectorA <- numeric(n) ## initialize vectors#
vectorB <- numeric(n)#
probA   <- numeric(n)#
#
## view the initialized vectors#
vectorA#
vectorB#
#
## start a simulation#
for(i in 1:3){#
	X <- rbinom(1,1,0.5) ## generate a random number that is 0 or 1#
	if(X == 0){ ## if the random number is 0, put a 1 in vectorA and a 0 in vector B#
		vectorA[i] <- 1#
	}#
	if(X == 1){ ## if the random number is 1, put a 1 in vectorB and a 0 in vectorA#
		vectorB[i] <- 1#
	}#
	print(c("i = ", vectorA))#
	print(c("i = ", vectorB))#
	probA <- sum(vectorA)/i#
	print(c("probA = ", probA))#
}#
#
## make a dataframe with the simulated information#
df <- data.frame(A = vectorA, B = vectorB, probabilityA = probA)#
df
n <- 10#
vectorA <- numeric(n) ## initialize vectors#
vectorB <- numeric(n)#
probA   <- numeric(n)#
#
## view the initialized vectors#
vectorA#
vectorB#
#
## start a simulation#
for(i in 1:10){#
	X <- rbinom(1,1,0.5) ## generate a random number that is 0 or 1#
	if(X == 0){ ## if the random number is 0, put a 1 in vectorA and a 0 in vector B#
		vectorA[i] <- 1#
	}#
	if(X == 1){ ## if the random number is 1, put a 1 in vectorB and a 0 in vectorA#
		vectorB[i] <- 1#
	}#
	print(c("i = ", vectorA))#
	print(c("i = ", vectorB))#
	probA <- sum(vectorA)/i#
	print(c("probA = ", probA))#
}#
#
## make a dataframe with the simulated information#
df <- data.frame(A = vectorA, B = vectorB, probabilityA = probA)#
df
n <- 10#
vectorA <- numeric(n) ## initialize vectors#
vectorB <- numeric(n)#
probA   <- numeric(n)#
#
## view the initialized vectors#
vectorA#
vectorB#
#
## start a simulation#
for(i in 1:10){#
	X <- rbinom(1,1,0.5) ## generate a random number that is 0 or 1#
	if(X == 0){ ## if the random number is 0, put a 1 in vectorA and a 0 in vector B#
		vectorA[i] <- 1#
	}#
	if(X == 1){ ## if the random number is 1, put a 1 in vectorB and a 0 in vectorA#
		vectorB[i] <- 1#
	}#
	print(c("i = ", vectorA))#
	print(c("i = ", vectorB))#
	probA[i] <- sum(vectorA)/i#
	print(c("probA = ", probA))#
}#
#
## make a dataframe with the simulated information#
df <- data.frame(A = vectorA, B = vectorB, probabilityA = probA)#
df
n <- 10#
vectorA <- numeric(n) ## initialize vectors#
vectorB <- numeric(n)#
probA   <- numeric(n)#
#
## view the initialized vectors#
vectorA#
vectorB#
#
## start a simulation#
for(i in 1:10){#
	X <- rbinom(1,1,0.5) ## generate a random number that is 0 or 1#
	if(X == 0){ ## if the random number is 0, put a 1 in vectorA and a 0 in vector B#
		vectorA[i] <- 1#
	}#
	if(X == 1){ ## if the random number is 1, put a 1 in vectorB and a 0 in vectorA#
		vectorB[i] <- 1#
	}#
	print(c("i = ", vectorA))#
	print(c("i = ", vectorB))#
	probA[i] <- sum(vectorA)/i#
	print(c("probA = ", probA[i]))#
}#
#
## make a dataframe with the simulated information#
df <- data.frame(A = vectorA, B = vectorB, probabilityA = probA)#
df
n <- 10#
vectorA <- numeric(n) ## initialize vectors#
vectorB <- numeric(n)#
probA   <- numeric(n)#
#
## view the initialized vectors#
vectorA#
vectorB#
#
## start a simulation#
for(i in 1:10){#
	X <- rbinom(1,1,0.5) ## generate a random number that is 0 or 1#
	if(X == 0){ ## if the random number is 0, put a 1 in vectorA and a 0 in vector B#
		vectorA[i] <- 1#
	}#
	if(X == 1){ ## if the random number is 1, put a 1 in vectorB and a 0 in vectorA#
		vectorB[i] <- 1#
	}#
	print(c("i = ", vectorA))#
	print(c("i = ", vectorB))#
	probA[i] <- sum(vectorA)/i#
}#
#
## make a dataframe with the simulated information#
df <- data.frame(A = vectorA, B = vectorB, probabilityA = probA)#
df
## changDes is a function that is based on the paper Chang et al. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDes <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- pbinom(a, n1, p0) ## probability of early termination under the null#
    pet1 <- pbinom(a, n1, p1)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## defining beta, equation 9 in paper#
  beta1 <- pbinom(a, n1, p1)#
  betaM <- NULL#
  if(m <= n1){#
    betaM <- beta1*(m/n1)#
  }#
  if(m > n1){#
    betaM <- beta1 + ((beta-beta1)*(m-n1))/(nt-n1)#
  }	#
  ## find Astar#
  aRight 	  <- NULL#
  probRight <- NULL#
  aLeft     <- NULL#
  probLeft  <- NULL#
  for(i in 1:n1a){#
    if(pbinom(i, n1a, p1) > betaM){#
      aRight    <- i#
      aLeft     <- i-1#
      probRight <- pbinom(i, n1a, p1)#
      probLeft  <- pbinom(i-1, n1a, p1)#
      break#
    }#
  }#
  astar <- ifelse( abs(probRight - betaM) < abs(probLeft - betaM), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
# changDesAlter is a function that is based on the paper Chang et al, but uses probability of early termination#
## as a basis of choosing the first critical value. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDesAlter <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- round(pbinom(a, n1, p0),3) ## probability of early termination under the null#
    pet1 <- round(pbinom(a, n1, p1),3)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## find astar#
  aRight   <- NULL#
  petRight <- NULL#
  aLeft    <- NULL#
  petLeft  <- NULL#
  ## find A star#
  for(i in 1:n1a){#
  	pet0i <- round(pbinom(i, n1a, p0),3)#
  	if(pet0i >= pet0){#
  		aRight   <- i#
  		aLeft    <- i-1#
  		petRight <- round(pbinom(i, n1a, p0),3)#
		petLeft  <- round(pbinom(i-1, n1a, p0),3)#
  		break#
  	}#
  }#
  astar <- ifelse( abs(petRight - pet0) < abs(petLeft - pet0), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
changDesCompare <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
	Design    <- matrix(c("Chang","Chang Alter",""), nrow=3)#
	chang     <-     as.matrix(changDes(a   = a,   c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            				   n1a = n1a, nta = nta,#
              				   p0  = p0,   p1 = p1))#
 	changAlter<- as.matrix(changDesAlter(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)  )           					 #
	dfCompare <- rbind(chang, changAlter, rep("", dim(chang)[2]))#
	dfCompare <- data.frame(Design = Design, dfCompare)#
	return(dfCompare)               	#
}
dfCompare <- NULL#
#
dfCompare <- changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 19, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 19, nta = 43, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 21, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 21, nta = 45, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 23, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 21, nta = 47, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 16, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 16, nta = 40, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 18, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 18, nta = 42, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 20, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 20, nta = 44, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 10, nta = 41, #
                         p0  = 0.4, p1 = 0.6))	#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 10, nta = 34,#
                         p0  = 0.4, p1 = 0.6))	#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 24, nta = 48, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))
dfCompare
changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 30, nta = 41,#
                     p0  = 0.4, p1 = 0.6)
## changDes is a function that is based on the paper Chang et al. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDes <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- pbinom(a, n1, p0) ## probability of early termination under the null#
    pet1 <- pbinom(a, n1, p1)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## defining beta, equation 9 in paper#
  beta1 <- pbinom(a, n1, p1)#
  betaM <- NULL#
  if(m <= n1){#
    betaM <- beta1*(m/n1)#
  }#
  if(m > n1){#
    betaM <- beta1 + ((beta-beta1)*(m-n1))/(nt-n1)#
  }	#
  ## find Astar#
  aRight 	  <- NULL#
  probRight <- NULL#
  aLeft     <- NULL#
  probLeft  <- NULL#
  for(i in 1:n1a){#
    if(pbinom(i, n1a, p1) > betaM){#
      aRight    <- i#
      aLeft     <- i-1#
      probRight <- pbinom(i, n1a, p1)#
      probLeft  <- pbinom(i-1, n1a, p1)#
      break#
    }#
  }#
  astar <- ifelse( abs(probRight - betaM) < abs(probLeft - betaM), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nta-n1a, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nta-n1a, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 10, nta = 41, #
                         p0  = 0.4, p1 = 0.6))	#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 10, nta = 34,#
                         p0  = 0.4, p1 = 0.6))
dfCompare
## changDesAlter is a function that is based on the paper Chang et al, but uses probability of early termination#
## as a basis of choosing the first critical value. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDesAlter <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- round(pbinom(a, n1, p0),3) ## probability of early termination under the null#
    pet1 <- round(pbinom(a, n1, p1),3)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## find astar#
  aRight   <- NULL#
  petRight <- NULL#
  aLeft    <- NULL#
  petLeft  <- NULL#
  ## find A star#
  for(i in 1:n1a){#
  	pet0i <- round(pbinom(i, n1a, p0),3)#
  	if(pet0i >= pet0){#
  		aRight   <- i#
  		aLeft    <- i-1#
  		petRight <- round(pbinom(i, n1a, p0),3)#
		petLeft  <- round(pbinom(i-1, n1a, p0),3)#
  		break#
  	}#
  }#
  astar <- ifelse( abs(petRight - pet0) < abs(petLeft - pet0), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nta-n1a, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nta-n1a, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
dfCompare <- NULL#
#
dfCompare <- changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 19, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 19, nta = 43, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 21, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 21, nta = 45, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 23, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 21, nta = 47, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 16, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 16, nta = 40, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 18, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 18, nta = 42, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 20, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 20, nta = 44, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 10, nta = 41, #
                         p0  = 0.4, p1 = 0.6))	#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 10, nta = 34,#
                         p0  = 0.4, p1 = 0.6))	#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 24, nta = 48, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))
dfCompare
YES
Y
## changDes is a function that is based on the paper Chang et al. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDes <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- pbinom(a, n1, p0) ## probability of early termination under the null#
    pet1 <- pbinom(a, n1, p1)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## defining beta, equation 9 in paper#
  beta1 <- pbinom(a, n1, p1)#
  betaM <- NULL#
  if(m <= n1){#
    betaM <- beta1*(m/n1)#
  }#
  if(m > n1){#
    betaM <- beta1 + ((beta-beta1)*(m-n1))/(nt-n1)#
  }	#
  ## find Astar#
  aRight 	  <- NULL#
  probRight <- NULL#
  aLeft     <- NULL#
  probLeft  <- NULL#
  for(i in 1:n1a){#
    if(pbinom(i, n1a, p1) > betaM){#
      aRight    <- i#
      aLeft     <- i-1#
      probRight <- pbinom(i, n1a, p1)#
      probLeft  <- pbinom(i-1, n1a, p1)#
      break#
    }#
  }#
  astar <- ifelse( abs(probRight - betaM) < abs(probLeft - betaM), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
## changDesAlter is a function that is based on the paper Chang et al, but uses probability of early termination#
## as a basis of choosing the first critical value. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDesAlter <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- round(pbinom(a, n1, p0),3) ## probability of early termination under the null#
    pet1 <- round(pbinom(a, n1, p1),3)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## find astar#
  aRight   <- NULL#
  petRight <- NULL#
  aLeft    <- NULL#
  petLeft  <- NULL#
  ## find A star#
  for(i in 1:n1a){#
  	pet0i <- round(pbinom(i, n1a, p0),3)#
  	if(pet0i >= pet0){#
  		aRight   <- i#
  		aLeft    <- i-1#
  		petRight <- round(pbinom(i, n1a, p0),3)#
		petLeft  <- round(pbinom(i-1, n1a, p0),3)#
  		break#
  	}#
  }#
  astar <- ifelse( abs(petRight - pet0) < abs(petLeft - pet0), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
changDesCompare <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
	Design    <- matrix(c("Chang","Chang Alter",""), nrow=3)#
	chang     <-     as.matrix(changDes(a   = a,   c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            				   n1a = n1a, nta = nta,#
              				   p0  = p0,   p1 = p1))#
 	changAlter<- as.matrix(changDesAlter(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)  )           					 #
	dfCompare <- rbind(chang, changAlter, rep("", dim(chang)[2]))#
	dfCompare <- data.frame(Design = Design, dfCompare)#
	return(dfCompare)               	#
}
changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,
n1  = 17,  nt = 41,
n1a = 17, nta = 41,
p0  = 0.4, p1 = 0.6)
dfCompare <- changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)
## changDes is a function that is based on the paper Chang et al. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDes <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- pbinom(a, n1, p0) ## probability of early termination under the null#
    pet1 <- pbinom(a, n1, p1)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## defining beta, equation 9 in paper#
  beta1 <- pbinom(a, n1, p1)#
  betaM <- NULL#
  if(m <= n1){#
    betaM <- beta1*(m/n1)#
  }#
  if(m > n1){#
    betaM <- beta1 + ((beta-beta1)*(m-n1))/(nt-n1)#
  }	#
  ## find Astar#
  aRight 	  <- NULL#
  probRight <- NULL#
  aLeft     <- NULL#
  probLeft  <- NULL#
  for(i in 1:n1a){#
    if(pbinom(i, n1a, p1) > betaM){#
      aRight    <- i#
      aLeft     <- i-1#
      probRight <- pbinom(i, n1a, p1)#
      probLeft  <- pbinom(i-1, n1a, p1)#
      break#
    }#
  }#
  astar <- ifelse( abs(probRight - betaM) < abs(probLeft - betaM), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
dfCompare <- changDesCompare(a   = 7,   c  = 2, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)
dfCompare
dfCompare <- changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 39,#
               p0  = 0.4, p1 = 0.6)
dfCompare
## changDes is a function that is based on the paper Chang et al. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDes <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- pbinom(a, n1, p0) ## probability of early termination under the null#
    pet1 <- pbinom(a, n1, p1)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## defining beta, equation 9 in paper#
  beta1 <- pbinom(a, n1, p1)#
  betaM <- NULL#
  if(m <= n1){#
    betaM <- beta1*(m/n1)#
  }#
  if(m > n1){#
    betaM <- beta1 + ((beta-beta1)*(m-n1))/(nt-n1)#
  }	#
  ## find Astar#
  aRight 	  <- NULL#
  probRight <- NULL#
  aLeft     <- NULL#
  probLeft  <- NULL#
  for(i in 1:n1a){#
    if(pbinom(i, n1a, p1) > betaM){#
      aRight    <- i#
      aLeft     <- i-1#
      probRight <- pbinom(i, n1a, p1)#
      probLeft  <- pbinom(i-1, n1a, p1)#
      break#
    }#
  }#
  astar <- ifelse( abs(probRight - betaM) < abs(probLeft - betaM), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){	## do we want nt?? or nta-n1a????		#
    #cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0 <- 1-pbinom(i-x1, nta-n1a, p0)#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
## changDesAlter is a function that is based on the paper Chang et al, but uses probability of early termination#
## as a basis of choosing the first critical value. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDesAlter <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- round(pbinom(a, n1, p0),3) ## probability of early termination under the null#
    pet1 <- round(pbinom(a, n1, p1),3)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## find astar#
  aRight   <- NULL#
  petRight <- NULL#
  aLeft    <- NULL#
  petLeft  <- NULL#
  ## find A star#
  for(i in 1:n1a){#
  	pet0i <- round(pbinom(i, n1a, p0),3)#
  	if(pet0i >= pet0){#
  		aRight   <- i#
  		aLeft    <- i-1#
  		petRight <- round(pbinom(i, n1a, p0),3)#
		petLeft  <- round(pbinom(i-1, n1a, p0),3)#
  		break#
  	}#
  }#
  astar <- ifelse( abs(petRight - pet0) < abs(petLeft - pet0), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
   # cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0 <- 1-pbinom(i-x1, nta-n1a, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional power#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
## changDesCompare is a function that compares the properties and critical values of the chang approach and an #
## altered chang approach. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
#
## in order to run this function, must define the functions `changDes` and `changDesAlter`#
#
changDesCompare <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
	Design    <- matrix(c("Chang","Chang Alter",""), nrow=3)#
	chang     <-     as.matrix(changDes(a   = a,   c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            				   n1a = n1a, nta = nta,#
              				   p0  = p0,   p1 = p1))#
 	changAlter<- as.matrix(changDesAlter(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)  )           					 #
	dfCompare <- rbind(chang, changAlter, rep("", dim(chang)[2]))#
	dfCompare <- data.frame(Design = Design, dfCompare)#
	return(dfCompare)               	#
}#
changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6)
## changDesAlter is a function that is based on the paper Chang et al, but uses probability of early termination#
## as a basis of choosing the first critical value. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDesAlter <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- round(pbinom(a, n1, p0),3) ## probability of early termination under the null#
    pet1 <- round(pbinom(a, n1, p1),3)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## find astar#
  aRight   <- NULL#
  petRight <- NULL#
  aLeft    <- NULL#
  petLeft  <- NULL#
  ## find A star#
  for(i in 1:n1a){#
  	pet0i <- round(pbinom(i, n1a, p0),3)#
  	if(pet0i >= pet0){#
  		aRight   <- i#
  		aLeft    <- i-1#
  		petRight <- round(pbinom(i, n1a, p0),3)#
		petLeft  <- round(pbinom(i-1, n1a, p0),3)#
  		break#
  	}#
  }#
  astar <- ifelse( abs(petRight - pet0) < abs(petLeft - pet0), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
   # cp0 <- 1-pbinom(i-x1, nta-n1a, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional power#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
## changDes is a function that is based on the paper Chang et al. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDes <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- pbinom(a, n1, p0) ## probability of early termination under the null#
    pet1 <- pbinom(a, n1, p1)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## defining beta, equation 9 in paper#
  beta1 <- pbinom(a, n1, p1)#
  betaM <- NULL#
  if(m <= n1){#
    betaM <- beta1*(m/n1)#
  }#
  if(m > n1){#
    betaM <- beta1 + ((beta-beta1)*(m-n1))/(nt-n1)#
  }	#
  ## find Astar#
  aRight 	  <- NULL#
  probRight <- NULL#
  aLeft     <- NULL#
  probLeft  <- NULL#
  for(i in 1:n1a){#
    if(pbinom(i, n1a, p1) > betaM){#
      aRight    <- i#
      aLeft     <- i-1#
      probRight <- pbinom(i, n1a, p1)#
      probLeft  <- pbinom(i-1, n1a, p1)#
      break#
    }#
  }#
  astar <- ifelse( abs(probRight - betaM) < abs(probLeft - betaM), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){	## do we want nt?? or nta-n1a????		#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    #cp0 <- 1-pbinom(i-x1, nta-n1a, p0)#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
## changDes is a function that is based on the paper Chang et al. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDes <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- pbinom(a, n1, p0) ## probability of early termination under the null#
    pet1 <- pbinom(a, n1, p1)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## defining beta, equation 9 in paper#
  beta1 <- pbinom(a, n1, p1)#
  betaM <- NULL#
  if(m <= n1){#
    betaM <- beta1*(m/n1)#
  }#
  if(m > n1){#
    betaM <- beta1 + ((beta-beta1)*(m-n1))/(nt-n1)#
  }	#
  ## find Astar#
  aRight 	  <- NULL#
  probRight <- NULL#
  aLeft     <- NULL#
  probLeft  <- NULL#
  for(i in 1:n1a){#
    if(pbinom(i, n1a, p1) > betaM){#
      aRight    <- i#
      aLeft     <- i-1#
      probRight <- pbinom(i, n1a, p1)#
      probLeft  <- pbinom(i-1, n1a, p1)#
      break#
    }#
  }#
  astar <- ifelse( abs(probRight - betaM) < abs(probLeft - betaM), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){	## do we want nt?? or nta-n1a????		#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    #cp0 <- 1-pbinom(i-x1, nta-n1a, p0)#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
## changDesCompare is a function that compares the properties and critical values of the chang approach and an #
## altered chang approach. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
#
## in order to run this function, must define the functions `changDes` and `changDesAlter`#
#
changDesCompare <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
	Design    <- matrix(c("Chang","Chang Alter",""), nrow=3)#
	chang     <-     as.matrix(changDes(a   = a,   c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            				   n1a = n1a, nta = nta,#
              				   p0  = p0,   p1 = p1))#
 	changAlter<- as.matrix(changDesAlter(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)  )           					 #
	dfCompare <- rbind(chang, changAlter, rep("", dim(chang)[2]))#
	dfCompare <- data.frame(Design = Design, dfCompare)#
	return(dfCompare)               	#
}#
changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6)
## changDesAlter is a function that is based on the paper Chang et al, but uses probability of early termination#
## as a basis of choosing the first critical value. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDesAlter <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- round(pbinom(a, n1, p0),3) ## probability of early termination under the null#
    pet1 <- round(pbinom(a, n1, p1),3)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## find astar#
  aRight   <- NULL#
  petRight <- NULL#
  aLeft    <- NULL#
  petLeft  <- NULL#
  ## find A star#
  for(i in 1:n1a){#
  	pet0i <- round(pbinom(i, n1a, p0),3)#
  	if(pet0i >= pet0){#
  		aRight   <- i#
  		aLeft    <- i-1#
  		petRight <- round(pbinom(i, n1a, p0),3)#
		petLeft  <- round(pbinom(i-1, n1a, p0),3)#
  		break#
  	}#
  }#
  astar <- ifelse( abs(petRight - pet0) < abs(petLeft - pet0), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
   # cp0 <- 1-pbinom(i-x1, nta-n1a, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  #cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional power#
  cp1 <- 1-pbinom(i-x1, nta-n1a, p1)  ## conditional power#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
## changDes is a function that is based on the paper Chang et al. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDes <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- pbinom(a, n1, p0) ## probability of early termination under the null#
    pet1 <- pbinom(a, n1, p1)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## defining beta, equation 9 in paper#
  beta1 <- pbinom(a, n1, p1)#
  betaM <- NULL#
  if(m <= n1){#
    betaM <- beta1*(m/n1)#
  }#
  if(m > n1){#
    betaM <- beta1 + ((beta-beta1)*(m-n1))/(nt-n1)#
  }	#
  ## find Astar#
  aRight 	  <- NULL#
  probRight <- NULL#
  aLeft     <- NULL#
  probLeft  <- NULL#
  for(i in 1:n1a){#
    if(pbinom(i, n1a, p1) > betaM){#
      aRight    <- i#
      aLeft     <- i-1#
      probRight <- pbinom(i, n1a, p1)#
      probLeft  <- pbinom(i-1, n1a, p1)#
      break#
    }#
  }#
  astar <- ifelse( abs(probRight - betaM) < abs(probLeft - betaM), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){	## do we want nt?? or nta-n1a????		#
    cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    #cp0 <- 1-pbinom(i-x1, nta-n1a, p0)#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  #cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1 <- 1-pbinom(i-x1, nta-n1a, p1)  ## conditional type I error#
#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
## changDesCompare is a function that compares the properties and critical values of the chang approach and an #
## altered chang approach. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
#
## in order to run this function, must define the functions `changDes` and `changDesAlter`#
#
changDesCompare <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
	Design    <- matrix(c("Chang","Chang Alter",""), nrow=3)#
	chang     <-     as.matrix(changDes(a   = a,   c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            				   n1a = n1a, nta = nta,#
              				   p0  = p0,   p1 = p1))#
 	changAlter<- as.matrix(changDesAlter(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)  )           					 #
	dfCompare <- rbind(chang, changAlter, rep("", dim(chang)[2]))#
	dfCompare <- data.frame(Design = Design, dfCompare)#
	return(dfCompare)               	#
}#
changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6)
dfCompare <- changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 19, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))
dfCompare
## changDes is a function that is based on the paper Chang et al. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDes <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- pbinom(a, n1, p0) ## probability of early termination under the null#
    pet1 <- pbinom(a, n1, p1)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## defining beta, equation 9 in paper#
  beta1 <- pbinom(a, n1, p1)#
  betaM <- NULL#
  if(m <= n1){#
    betaM <- beta1*(m/n1)#
  }#
  if(m > n1){#
    betaM <- beta1 + ((beta-beta1)*(m-n1))/(nt-n1)#
  }	#
  ## find Astar#
  aRight 	  <- NULL#
  probRight <- NULL#
  aLeft     <- NULL#
  probLeft  <- NULL#
  for(i in 1:n1a){#
    if(pbinom(i, n1a, p1) > betaM){#
      aRight    <- i#
      aLeft     <- i-1#
      probRight <- pbinom(i, n1a, p1)#
      probLeft  <- pbinom(i-1, n1a, p1)#
      break#
    }#
  }#
  astar <- ifelse( abs(probRight - betaM) < abs(probLeft - betaM), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){	## do we want nt?? or nta-n1a????		#
    #cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0 <- 1-pbinom(i-x1, nta-n1a, p0)#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  #cp1 <- 1-pbinom(i-x1, nta-n1a, p1)  ## conditional type I error#
#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
## changDesAlter is a function that is based on the paper Chang et al, but uses probability of early termination#
## as a basis of choosing the first critical value. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDesAlter <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- round(pbinom(a, n1, p0),3) ## probability of early termination under the null#
    pet1 <- round(pbinom(a, n1, p1),3)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## find astar#
  aRight   <- NULL#
  petRight <- NULL#
  aLeft    <- NULL#
  petLeft  <- NULL#
  ## find A star#
  for(i in 1:n1a){#
  	pet0i <- round(pbinom(i, n1a, p0),3)#
  	if(pet0i >= pet0){#
  		aRight   <- i#
  		aLeft    <- i-1#
  		petRight <- round(pbinom(i, n1a, p0),3)#
		petLeft  <- round(pbinom(i-1, n1a, p0),3)#
  		break#
  	}#
  }#
  astar <- ifelse( abs(petRight - pet0) < abs(petLeft - pet0), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
   # cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0 <- 1-pbinom(i-x1, nta-n1a, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional power#
  #cp1 <- 1-pbinom(i-x1, nta-n1a, p1)  ## conditional power#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
## changDesCompare is a function that compares the properties and critical values of the chang approach and an #
## altered chang approach. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
#
## in order to run this function, must define the functions `changDes` and `changDesAlter`#
#
changDesCompare <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
	Design    <- matrix(c("Chang","Chang Alter",""), nrow=3)#
	chang     <-     as.matrix(changDes(a   = a,   c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            				   n1a = n1a, nta = nta,#
              				   p0  = p0,   p1 = p1))#
 	changAlter<- as.matrix(changDesAlter(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)  )           					 #
	dfCompare <- rbind(chang, changAlter, rep("", dim(chang)[2]))#
	dfCompare <- data.frame(Design = Design, dfCompare)#
	return(dfCompare)               	#
}
dfCompare <- NULL#
#
dfCompare <- changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 19, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))
dfCompare
## changDesAlter is a function that is based on the paper Chang et al, but uses probability of early termination#
## as a basis of choosing the first critical value. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDesAlter <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- round(pbinom(a, n1, p0),3) ## probability of early termination under the null#
    pet1 <- round(pbinom(a, n1, p1),3)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## find astar#
  aRight   <- NULL#
  petRight <- NULL#
  aLeft    <- NULL#
  petLeft  <- NULL#
  ## find A star#
  for(i in 1:n1a){#
  	pet0i <- round(pbinom(i, n1a, p0),3)#
  	if(pet0i >= pet0){#
  		aRight   <- i#
  		aLeft    <- i-1#
  		petRight <- round(pbinom(i, n1a, p0),3)#
		petLeft  <- round(pbinom(i-1, n1a, p0),3)#
  		break#
  	}#
  }#
  astar <- ifelse( abs(petRight - pet0) < abs(petLeft - pet0), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){#
   # cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0 <- 1-pbinom(i-x1, nta-n1a, p0)  ## conditional type I error#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  #cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional power#
  cp1 <- 1-pbinom(i-x1, nta-n1a, p1)  ## conditional power#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
## changDes is a function that is based on the paper Chang et al. Alternative Designs for Phase II#
## Clinical Trials when Attained Sample Sizes are Different From Planned Sample Sizes#
## the function takes a (planned stage 1 cv), c (planned stage 2 cv), #
##                    beta (type II error)  , alpha (type I error),#
##                    n1 (planned stage 1 sample size), nt (planned total sample size)#
##                    n1a (attained stage 1 sample size), nta (attained total sample size)#
##                    p0 (null hypothesis response rate), p1 (alternative hypothesis response rate)#
## The function will return the above parameters and expected sample size under the null and alternative for unplanned#
## sample sizes, probability of early termination under null and alternative for planned and unplanned sample sizes, #
## closed form type 1 error and power for unplanned sample sizes, and simulated type I error and power for planned sample sizes.#
changDes <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
    pet0 <- pbinom(a, n1, p0) ## probability of early termination under the null#
    pet1 <- pbinom(a, n1, p1)#
#
  m     = n1a#
  astar = NULL#
  cstar = NULL#
  ## defining beta, equation 9 in paper#
  beta1 <- pbinom(a, n1, p1)#
  betaM <- NULL#
  if(m <= n1){#
    betaM <- beta1*(m/n1)#
  }#
  if(m > n1){#
    betaM <- beta1 + ((beta-beta1)*(m-n1))/(nt-n1)#
  }	#
  ## find Astar#
  aRight 	  <- NULL#
  probRight <- NULL#
  aLeft     <- NULL#
  probLeft  <- NULL#
  for(i in 1:n1a){#
    if(pbinom(i, n1a, p1) > betaM){#
      aRight    <- i#
      aLeft     <- i-1#
      probRight <- pbinom(i, n1a, p1)#
      probLeft  <- pbinom(i-1, n1a, p1)#
      break#
    }#
  }#
  astar <- ifelse( abs(probRight - betaM) < abs(probLeft - betaM), aRight, aLeft)#
  ## find C star#
  ## sum from a to n1* P(Y2star > rt* - y1*) < alpha#
  x1       <- 0:n1a#
  y0       <- dbinom(x1,n1a,p0)   ## P(X1 = x1 | n1, p0)#
  type1    <- NULL#
  powerObs <- NULL#
  for(i in astar:nta){	## do we want nt?? or nta-n1a????		#
    #cp0 <- 1-pbinom(i-x1, nt-n1, p0)  ## conditional type I error#
    cp0 <- 1-pbinom(i-x1, nta-n1a, p0)#
    cp0[x1 <= astar] <- 0 #
    cp0[x1 > i]      <- 1  #
    type1 <- sum( cp0 * y0) #sum[P(Y2* > rt*-y1*) * P(Y1* = y1*)]#
    if(type1 < alpha){#
      cstar <- i#
      break#
    }#
  }#
  ## calculate power#
  y1       <- dbinom(x1,n1a,p1)   ## P(X1 = x1 | n1, p0)#
  #cp1 <- 1-pbinom(i-x1, nt-n1, p1)  ## conditional type I error#
  cp1 <- 1-pbinom(i-x1, nta-n1a, p1)  ## conditional type I error#
#
  cp1[x1 <= astar] <- 0 #
  cp1[x1 > i]      <- 1  #
  powerObs <- sum( cp1 * y1)#
  ## other characteristics#
  pet0star <- pbinom(astar, n1a, p0) ## probability of early termination under the null#
  pet1star <- pbinom(astar, n1a, p1) ## probability of early termination under the alternative#
  EN0star <- n1a + (1-pet0star) * (nta-n1a) ## expected sample size under null#
  ## n1 + n2 * sum_r1+1^n1 dbinom(x1,n1,p0)#
  EN1star <- n1a + (1-pet1star) * (nta-n1a) ## expected sample size under alternative#
  ## include simulation results#
  ###########################	#
  ## type I error simulation#
  ############################
  r1 <- astar#
  rt <- cstar#
  n1sim <- n1a#
  ntsim <- nta#
  p0 <- p0#
  p1 <- p1#
  ## under null#
  sims          <- 10000#
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  type1Sim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p0)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p0)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  type1Sim <- rejectNull/sims#
  ############################
  ## Power simulation#
  ## under alternative#
  #############################
  results1      <- c()#
  results2      <- c()#
  rejectNull    <- 0#
  totalResponse <- NULL#
  totalStage1   <- NULL#
  totalStage2   <- NULL#
  powerSim      <- NULL#
  for(j in 1:sims){#
    ## set up first stage#
    for(i in 1:n1sim){#
      ## get a number of responses#
      results1[i] <- rbinom(1, 1, p1)#
    }#
    totalStage1 <- sum(results1)#
    #print(totalStage1)#
    if(totalStage1 <= r1){#
      rejectNull <- rejectNull + 0#
    }#
    if(totalStage1 > r1){ ## go to second stage#
      ## enroll n2 patients more#
      for(k in 1:(ntsim-n1sim)){#
        results2[k] <- rbinom(1, 1, p1)#
      }#
      totalStage2 <- sum(results2)#
      totalResponse <- totalStage1 + totalStage2#
      rejectNull <- ifelse(totalResponse > rt, rejectNull + 1, rejectNull + 0)#
    }#
  }#
  powerSim <- rejectNull/sims#
  R <- function(x){#
	  round(x, 3)#
  }#
  ## print results in data frame#
  results <- data.frame(p0 = p0, p1 = p1, n1 = n1, n = nt, a = a, c = c,#
                        alpha = alpha, power = 1-beta, #
                        pet0 = R(pet0), pet1 = R(pet1),#
                        n1star = n1a, nstar = nta,#
                        astar = astar, cstar = cstar, #
                        type1Obs = R(type1), powerObs = R(powerObs),#
                        pet0star = R(pet0star), pet1star = R(pet1star), #
                        EN0star = R(EN0star), EN1star = R(EN1star),#
                        type1Sim = R(type1Sim), powerSim = R(powerSim))#
  return(results)					 	#
}
changDesCompare <- function(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                     n1  = 17,  nt = 41, #
                     n1a = 17, nta = 41,#
                     p0  = 0.4, p1 = 0.6){#
	Design    <- matrix(c("Chang","Chang Alter",""), nrow=3)#
	chang     <-     as.matrix(changDes(a   = a,   c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            				   n1a = n1a, nta = nta,#
              				   p0  = p0,   p1 = p1))#
 	changAlter<- as.matrix(changDesAlter(a   = a,    c  = c, beta = beta, alpha = alpha,#
            				   n1  = n1,   nt = nt, #
            			       n1a = n1a, nta = nta,#
              			   	   p0  = p0,   p1 = p1)  )           					 #
	dfCompare <- rbind(chang, changAlter, rep("", dim(chang)[2]))#
	dfCompare <- data.frame(Design = Design, dfCompare)#
	return(dfCompare)               	#
}
dfCompare <- NULL#
#
dfCompare <- changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 19, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 19, nta = 43, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))
dfCompare
dfCompare <- NULL#
#
dfCompare <- changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
               n1  = 17,  nt = 41, #
               n1a = 17, nta = 41,#
               p0  = 0.4, p1 = 0.6)#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 19, nta = 41, ## keep original sample size the same#
                         p0  = 0.4, p1 = 0.6))	#
#
dfCompare <- rbind(dfCompare, changDesCompare(a   = 7,   c  = 21, beta = 0.2, alpha = 0.05,#
                         n1  = 17,  nt = 41, #
                         n1a = 19, nta = 43, ## keep original stage 2 sample size the same#
                         p0  = 0.4, p1 = 0.6))
dfCompare
